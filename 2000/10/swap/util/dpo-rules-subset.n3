#    Schema rules for daml schema validation in N3
#
#    See validate.n3
#
# This is missing a bunch of general daml axioms such as UnambiguousProperty
# rules etc.  It has stuff found useful for schema validation.
#
# The basic strategy is that which ontology systems seem to assume:
# Find all classes to which everything belongs, and deduce things from that.
#
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix doc: <http://www.w3.org/2000/10/swap/pim/doc#> .
@prefix daml: <http://www.daml.org/2001/03/daml+oil#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .

@prefix : <validate#> .       # For our use
@prefix v: <validate.n3#> .	# Hint for others use

@forAll <#x>, <#y>, <#z> .
@forAll <#p>, <#p1>, <#p2>,	# Properties
	 <#c>, <#c1>, <#c2>.   # Classes

<> doc:version "$Id: dpo-rules-subset.n3,v 1.4 2009-02-26 17:10:45 timbl Exp $".

# The following is a subset of the properties of =, which should not need stating.
# But cwm currently doesn't know a lot about = inherently. @@

{ <#x> <#p1> <#y> . <#p1> = <#p2> . } log:implies {<#x> <#p2> <#y> } . # Duh

# Can deduce RDFS from daml versions:
# (The example uses daml: and the groups seems to change its mind on which is best)

daml:subPropertyOf = rdfs:subPropertyOf .
daml:subClassOf = rdfs:subClassOf .
daml:range 	= rdfs:range .
daml:domain = rdfs:domain .

daml:Class rdfs:subClassOf rdfs:Class.   # Make daml definitions work for RDFS engines
daml:Property rdfs:subClassOf rdf:Property.

daml:UniqueProperty rdfs:subClassOf daml:Property.
daml:UnambiguousProperty rdfs:subClassOf daml:Property.

# Implication of transitivity:


{  <#p> a daml:TransitiveProperty . } log:implies

{
  {
    { <#x> <#p> <#y>. <#y> <#p> <#z>. } log:implies { <#x> <#p> <#z>. }
  } a log:Truth; log:forAll <#x> , <#y> , <#z>.
} .


rdfs:subPropertyOf 	a daml:TransitiveProperty .

rdfs:subClassOf 		a daml:TransitiveProperty .

# Implication of subclass:


{ 	<#x> a <#c1>.
	<#c1> rdfs:subClassOf <#c2> . } log:implies  { <#x> a <#c2> } .

# Implication of subPropertyOf:


{ 	<#p1> has rdfs:range <#c>.
	<#p2> rdfs:subPropertyOf <#p1> . } log:implies  { <#p2> has rdfs:range <#c> } .


# Implication of Range and domain
#  From domain to range

{ 	<#p> rdfs:domain <#c>.
	<#x> <#p> <#y> . } log:implies  { <#x> a <#c> } .

{ 	<#p> rdfs:range <#c>.
	<#x> <#p> <#y> . } log:implies  { <#y> a <#c> } .

# From the above once can conclude the specific propagation rules
# for of subclasss and subproperties, such as:
#
#rule1
#	log:forAll <#x> <#y> ;
#	a log:Truth;
#	= {
#    		{ <#x> rdfs:subProperty <#y>. <#y> rdfs:subProperty <#z>. } log:implies
#			{ <#x> rdfs:subProperty <#z>. }
#  	} .


# The first NOT we come across is disjointWith:

{ 	<#x> a <#y> .
	<#x> a <#z> .
	<#y> daml:disjointFrom <#z> } log:implies { <#x> v:ERROR  "Member of disjoint classes" } .


# <> daml:imports <rdfs.n3> . #?@@@@@@@@@@@




