#Processed by Id: cwm.py,v 1.197 2007/12/13 15:38:39 syosi Exp 
        #    using base file:///devel/WWW/2000/10/swap/grammar/
        
#  Notation3 generation by
#       notation3.py,v 1.200 2007/12/11 21:18:08 syosi Exp

#   Base was: file:///devel/WWW/2000/10/swap/grammar/
     @prefix : <http://www.w3.org/2000/10/swap/grammar/bnf2html#> .
    @prefix bnf: <http://www.w3.org/2000/10/swap/grammar/bnf#> .
    @prefix log: <http://www.w3.org/2000/10/swap/log#> .
    @prefix n: <http://www.w3.org/2000/10/swap/grammar/n3ql#> .
    @prefix rul: <http://www.w3.org/2000/10/swap/grammar/bnf-rules#> .
    
     @forSome <#_g0>,
                <#_g1>,
                <#_g2>,
                <#_g3>,
                <#_g4>,
                <#_g5>,
                <#_g6> .
    
    "!"     :reference """<b><code>"!"</code></b>""" .
    
    "("     :reference """<b><code>"("</code></b>""" .
    
    ")"     :reference """<b><code>")"</code></b>""" .
    
    ","     :reference """<b><code>","</code></b>""" .
    
    "."     :reference """<b><code>"."</code></b>""" .
    
    ";"     :reference """<b><code>";"</code></b>""" .
    
    "="     :reference """<b><code>"="</code></b>""" .
    
    "=>"     :reference """<b><code>"=>"</code></b>""" .
    
    "@"     :reference """<b><code>"@"</code></b>""" .
    
    "@a"     :reference """<b><code>"@a"</code></b>""" .
    
    "@base"     :reference """<b><code>"@base"</code></b>""" .
    
    "@forAll"     :reference """<b><code>"@forAll"</code></b>""" .
    
    "@forSome"     :reference """<b><code>"@forSome"</code></b>""" .
    
    "@has"     :reference """<b><code>"@has"</code></b>""" .
    
    "@is"     :reference """<b><code>"@is"</code></b>""" .
    
    "@keywords"     :reference """<b><code>"@keywords"</code></b>""" .
    
    "@of"     :reference """<b><code>"@of"</code></b>""" .
    
    "@prefix"     :reference """<b><code>"@prefix"</code></b>""" .
    
    "["     :reference """<b><code>"["</code></b>""" .
    
    "]"     :reference """<b><code>"]"</code></b>""" .
    
    "^"     :reference """<b><code>"^"</code></b>""" .
    
    "^^"     :reference """<b><code>"^^"</code></b>""" .
    
    "{"     :reference """<b><code>"{"</code></b>""" .
    
    "}"     :reference """<b><code>"}"</code></b>""" .
    
    ()     a :Sequence,
                :SequenceTail;
         :seqlabel "<em>void</em>" .
      ( "!"
        n:path )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"!"</code></b> <a href='#path'>path</a>""" .
      ( "("
        n:itemlist
        ")" )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"("</code></b> <a href='#itemlist'>itemlist</a> <b><code>")"</code></b>""" .
      ( ")" )
         a :SequenceTail;
         :seqlabel """<b><code>")"</code></b>""" .
      ( ","
        n:barename
        <#_g6> )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>","</code></b> <a href='#barename'>barename</a> <a href='#barename_csl'>barename_csl</a>""" .
      ( ","
        n:object
        n:objecttail )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>","</code></b> <a href='#object'>object</a> <a href='#objecttail'>objecttail</a>""" .
      ( ","
        n:symbol
        <#_g4> )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>","</code></b> <a href='#symbol'>symbol</a> <a href='#symbol_csl'>symbol_csl</a>""" .
      ( ","
        n:symbol
        <#_g5> )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>","</code></b> <a href='#symbol'>symbol</a> <a href='#symbol_csl'>symbol_csl</a>""" .
      ( "."
        n:statementlist )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"."</code></b> <a href='#statementlist'>statementlist</a>""" .
      ( "."
        n:statements_optional )
         a :SequenceTail;
         :seqlabel """<b><code>"."</code></b> <a href='#statements_optional'>statements_optional</a>""" .
      ( "." )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"."</code></b>""" .
      ( "0"
        0 )
         log:outputString """<html>
<head>
   <title>BNF</title>
</head>
<body>
  <h1>BNF</h1>
  <p>Productions are in normal type, linked to their definitions.<br />
    <em>Regular expressions are in italics</em><br />
    <b><code>Literal characters in quoted in bold</code></b><br />
    <em>void</em> means an empty production.
  </p>
  <dl>
""" .
      ( ";"
        n:propertylist )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>";"</code></b> <a href='#propertylist'>propertylist</a>""" .
      ( "=" )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"="</code></b>""" .
      ( "=>"
        "{"
        n:formula_safe
        "}" )
         a :SequenceTail .
      ( "=>"
        "{"
        n:formulacontent
        "}" )
         a :SequenceTail;
         :seqlabel """<b><code>"=>"</code></b> <b><code>"{"</code></b> <a href='#formulacontent'>formulacontent</a> <b><code>"}"</code></b>""" .
      ( "@"
        n:langcode )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"@"</code></b> <a href='#langcode'>langcode</a>""" .
      ( "@a" )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"@a"</code></b>""" .
      ( "@base"
        n:explicituri
        "." )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"@base"</code></b> <a href='#explicituri'>explicituri</a> <b><code>"."</code></b>""" .
      ( "@forAll"
        <#_g4> )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"@forAll"</code></b> <a href='#symbol_csl'>symbol_csl</a>""" .
      ( "@forSome"
        <#_g5> )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"@forSome"</code></b> <a href='#symbol_csl'>symbol_csl</a>""" .
      ( "@has"
        n:prop )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"@has"</code></b> <a href='#prop'>prop</a>""" .
      ( "@is"
        n:prop
        "@of" )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"@is"</code></b> <a href='#prop'>prop</a> <b><code>"@of"</code></b>""" .
      ( "@keywords"
        <#_g6> )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"@keywords"</code></b> <a href='#barename_csl'>barename_csl</a>""" .
      ( "@of" )
         a :SequenceTail;
         :seqlabel """<b><code>"@of"</code></b>""" .
      ( "@prefix"
        n:qname
        n:explicituri
        "." )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"@prefix"</code></b> <a href='#qname'>qname</a> <a href='#explicituri'>explicituri</a> <b><code>"."</code></b>""" .
      ( "["
        n:propertylist
        "]" )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"["</code></b> <a href='#propertylist'>propertylist</a> <b><code>"]"</code></b>""" .
      ( "]" )
         a :SequenceTail;
         :seqlabel """<b><code>"]"</code></b>""" .
      ( "^"
        n:path )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"^"</code></b> <a href='#path'>path</a>""" .
      ( "^^"
        n:symbol )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"^^"</code></b> <a href='#symbol'>symbol</a>""" .
      ( "alphanumeric"
        0 )
         log:outputString """  <dt><a name='alphanumeric'>alphanumeric</a></dt><dd>
""" .
      ( "alphanumeric"
        6 )
         log:outputString """	<p><em>[a-zA-Z][a-zA-Z0-9_]*</em></p>
""" .
      ( "alphanumeric"
        9 )
         log:outputString "\t</dd>\n" .
      ( "barename"
        0 )
         log:outputString """  <dt><a name='barename'>barename</a></dt><dd>
""" .
      ( "barename"
        6 )
         log:outputString """	<p><em>[a-zA-Z_][a-zA-Z0-9_]*</em></p>
""" .
      ( "barename"
        9 )
         log:outputString "\t</dd>\n" .
      ( "barename_csl"
        0 )
         log:outputString """  <dt><a name='barename_csl'>barename_csl</a></dt><dd>
""" .
      ( "barename_csl"
        5 )
         log:outputString """		<p><b><code>","</code></b> <a href='#barename'>barename</a> <a href='#barename_csl'>barename_csl</a></p>
""",
                """		<p><b><code>"."</code></b></p>
""" .
      ( "barename_csl"
        9 )
         log:outputString "\t</dd>\n" .
      ( "declaration"
        0 )
         log:outputString """  <dt><a name='declaration'>declaration</a></dt><dd>
""" .
      ( "declaration"
        5 )
         log:outputString """		<p><b><code>"@base"</code></b> <a href='#explicituri'>explicituri</a> <b><code>"."</code></b></p>
""",
                """		<p><b><code>"@keywords"</code></b> <a href='#barename_csl'>barename_csl</a></p>
""",
                """		<p><b><code>"@prefix"</code></b> <a href='#qname'>qname</a> <a href='#explicituri'>explicituri</a> <b><code>"."</code></b></p>
""" .
      ( "declaration"
        9 )
         log:outputString "\t</dd>\n" .
      ( "declaration_s"
        0 )
         log:outputString """  <dt><a name='declaration_s'>declaration_s</a></dt><dd>
""" .
      ( "declaration_s"
        5 )
         log:outputString """		<p><a href='#declaration'>declaration</a> <a href='#declaration_s'>declaration_s</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "declaration_s"
        9 )
         log:outputString "\t</dd>\n" .
      ( "document"
        0 )
         log:outputString """  <dt><a name='document'>document</a></dt><dd>
""" .
      ( "document"
        5 )
         log:outputString """		<p><a href='#declaration_s'>declaration_s</a> <a href='#existential_s'>existential_s</a> <a href='#statements_optional'>statements_optional</a> <em>EOF</em></p>
""" .
      ( "document"
        9 )
         log:outputString "\t</dd>\n" .
      ( "dtlang"
        0 )
         log:outputString """  <dt><a name='dtlang'>dtlang</a></dt><dd>
""" .
      ( "dtlang"
        5 )
         log:outputString """		<p><b><code>"@"</code></b> <a href='#langcode'>langcode</a></p>
""",
                """		<p><b><code>"^^"</code></b> <a href='#symbol'>symbol</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "dtlang"
        9 )
         log:outputString "\t</dd>\n" .
      ( "existential"
        0 )
         log:outputString """  <dt><a name='existential'>existential</a></dt><dd>
""" .
      ( "existential"
        5 )
         log:outputString """		<p><b><code>"@forSome"</code></b> <a href='#symbol_csl'>symbol_csl</a></p>
""" .
      ( "existential"
        9 )
         log:outputString "\t</dd>\n" .
      ( "existential_s"
        0 )
         log:outputString """  <dt><a name='existential_s'>existential_s</a></dt><dd>
""" .
      ( "existential_s"
        5 )
         log:outputString """		<p><a href='#existential'>existential</a> <a href='#existential_s'>existential_s</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "existential_s"
        9 )
         log:outputString "\t</dd>\n" .
      ( "explicituri"
        0 )
         log:outputString """  <dt><a name='explicituri'>explicituri</a></dt><dd>
""" .
      ( "explicituri"
        6 )
         log:outputString """	<p><em><[^>].*></em></p>
""" .
      ( "explicituri"
        9 )
         log:outputString "\t</dd>\n" .
      ( "formulacontent"
        0 )
         log:outputString """  <dt><a name='formulacontent'>formulacontent</a></dt><dd>
""" .
      ( "formulacontent"
        5 )
         log:outputString """		<p><a href='#declaration_s'>declaration_s</a> <a href='#existential_s'>existential_s</a> <a href='#statementlist'>statementlist</a></p>
""" .
      ( "formulacontent"
        9 )
         log:outputString "\t</dd>\n" .
      ( "item"
        0 )
         log:outputString """  <dt><a name='item'>item</a></dt><dd>
""" .
      ( "item"
        5 )
         log:outputString """		<p><a href='#path'>path</a></p>
""" .
      ( "item"
        9 )
         log:outputString "\t</dd>\n" .
      ( "itemlist"
        0 )
         log:outputString """  <dt><a name='itemlist'>itemlist</a></dt><dd>
""" .
      ( "itemlist"
        5 )
         log:outputString """		<p><a href='#item'>item</a> <a href='#itemlist'>itemlist</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "itemlist"
        9 )
         log:outputString "\t</dd>\n" .
      ( "langcode"
        0 )
         log:outputString """  <dt><a name='langcode'>langcode</a></dt><dd>
""" .
      ( "langcode"
        6 )
         log:outputString """	<p><em>[a-zA-Z0-9]+(-[a-zA-Z0-9]+)?</em></p>
""" .
      ( "langcode"
        9 )
         log:outputString "\t</dd>\n" .
      ( "literal"
        0 )
         log:outputString """  <dt><a name='literal'>literal</a></dt><dd>
""" .
      ( "literal"
        5 )
         log:outputString """		<p><a href='#string'>string</a> <a href='#dtlang'>dtlang</a></p>
""" .
      ( "literal"
        9 )
         log:outputString "\t</dd>\n" .
      ( "node"
        0 )
         log:outputString """  <dt><a name='node'>node</a></dt><dd>
""" .
      ( "node"
        5 )
         log:outputString """		<p><a href='#literal'>literal</a></p>
""",
                """		<p><a href='#numericliteral'>numericliteral</a></p>
""",
                """		<p><a href='#symbol'>symbol</a></p>
""",
                """		<p><a href='#variable'>variable</a></p>
""",
                """		<p><b><code>"("</code></b> <a href='#itemlist'>itemlist</a> <b><code>")"</code></b></p>
""",
                """		<p><b><code>"["</code></b> <a href='#propertylist'>propertylist</a> <b><code>"]"</code></b></p>
""" .
      ( "node"
        9 )
         log:outputString "\t</dd>\n" .
      ( "node_safe"
        0 )
         log:outputString """  <dt><a name='node_safe'>node_safe</a></dt><dd>
""" .
      ( "node_safe"
        5 )
         log:outputString """		<p><a href='#literal'>literal</a></p>
""",
                """		<p><a href='#numericliteral'>numericliteral</a></p>
""",
                """		<p><a href='#symbol'>symbol</a></p>
""",
                """		<p><a href='#variable'>variable</a></p>
""" .
      ( "node_safe"
        9 )
         log:outputString "\t</dd>\n" .
      ( "numericliteral"
        0 )
         log:outputString """  <dt><a name='numericliteral'>numericliteral</a></dt><dd>
""" .
      ( "numericliteral"
        6 )
         log:outputString """	<p><em>[-+]?[0-9]+(\\.[0-9]+)?(e[-+]?[0-9]+)?</em></p>
""" .
      ( "numericliteral"
        9 )
         log:outputString "\t</dd>\n" .
      ( "object"
        0 )
         log:outputString """  <dt><a name='object'>object</a></dt><dd>
""" .
      ( "object"
        5 )
         log:outputString """		<p><a href='#item'>item</a></p>
""" .
      ( "object"
        9 )
         log:outputString "\t</dd>\n" .
      ( "objecttail"
        0 )
         log:outputString """  <dt><a name='objecttail'>objecttail</a></dt><dd>
""" .
      ( "objecttail"
        5 )
         log:outputString """		<p><b><code>","</code></b> <a href='#object'>object</a> <a href='#objecttail'>objecttail</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "objecttail"
        9 )
         log:outputString "\t</dd>\n" .
      ( "path"
        0 )
         log:outputString """  <dt><a name='path'>path</a></dt><dd>
""" .
      ( "path"
        5 )
         log:outputString """		<p><a href='#node'>node</a> <a href='#pathtail'>pathtail</a></p>
""" .
      ( "path"
        9 )
         log:outputString "\t</dd>\n" .
      ( "pathtail"
        0 )
         log:outputString """  <dt><a name='pathtail'>pathtail</a></dt><dd>
""" .
      ( "pathtail"
        5 )
         log:outputString """		<p><b><code>"!"</code></b> <a href='#path'>path</a></p>
""",
                """		<p><b><code>"^"</code></b> <a href='#path'>path</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "pathtail"
        9 )
         log:outputString "\t</dd>\n" .
      ( "prop"
        0 )
         log:outputString """  <dt><a name='prop'>prop</a></dt><dd>
""" .
      ( "prop"
        5 )
         log:outputString """		<p><a href='#node'>node</a></p>
""" .
      ( "prop"
        9 )
         log:outputString "\t</dd>\n" .
      ( "propertylist"
        0 )
         log:outputString """  <dt><a name='propertylist'>propertylist</a></dt><dd>
""" .
      ( "propertylist"
        5 )
         log:outputString """		<p><a href='#verb'>verb</a> <a href='#object'>object</a> <a href='#objecttail'>objecttail</a> <a href='#propertylisttail'>propertylisttail</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "propertylist"
        9 )
         log:outputString "\t</dd>\n" .
      ( "propertylisttail"
        0 )
         log:outputString """  <dt><a name='propertylisttail'>propertylisttail</a></dt><dd>
""" .
      ( "propertylisttail"
        5 )
         log:outputString """		<p><b><code>";"</code></b> <a href='#propertylist'>propertylist</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "propertylisttail"
        9 )
         log:outputString "\t</dd>\n" .
      ( "qname"
        0 )
         log:outputString """  <dt><a name='qname'>qname</a></dt><dd>
""" .
      ( "qname"
        6 )
         log:outputString """	<p><em>(([a-zA-Z_][a-zA-Z0-9_]*)?:)?([a-zA-Z_][a-zA-Z0-9_]*)?</em></p>
""" .
      ( "qname"
        9 )
         log:outputString "\t</dd>\n" .
      ( "rule"
        0 )
         log:outputString """  <dt><a name='rule'>rule</a></dt><dd>
""" .
      ( "rule"
        5 )
         log:outputString """		<p><b><code>"{"</code></b> <a href='#formulacontent'>formulacontent</a> <b><code>"}"</code></b> <b><code>"=>"</code></b> <b><code>"{"</code></b> <a href='#formulacontent'>formulacontent</a> <b><code>"}"</code></b></p>
""" .
      ( "rule"
        9 )
         log:outputString "\t</dd>\n" .
      ( "rule_safe"
        0 )
         log:outputString """  <dt><a name='rule_safe'>rule_safe</a></dt><dd>
""" .
      ( "rule_safe"
        9 )
         log:outputString "\t</dd>\n" .
      ( "statement"
        0 )
         log:outputString """  <dt><a name='statement'>statement</a></dt><dd>
""" .
      ( "statement"
        5 )
         log:outputString """		<p><a href='#subject'>subject</a> <a href='#propertylist'>propertylist</a></p>
""" .
      ( "statement"
        9 )
         log:outputString "\t</dd>\n" .
      ( "statement_or_rule"
        0 )
         log:outputString """  <dt><a name='statement_or_rule'>statement_or_rule</a></dt><dd>
""" .
      ( "statement_or_rule"
        5 )
         log:outputString """		<p><a href='#rule'>rule</a></p>
""",
                """		<p><a href='#statement'>statement</a></p>
""" .
      ( "statement_or_rule"
        9 )
         log:outputString "\t</dd>\n" .
      ( "statementlist"
        0 )
         log:outputString """  <dt><a name='statementlist'>statementlist</a></dt><dd>
""" .
      ( "statementlist"
        5 )
         log:outputString """		<p><a href='#statement'>statement</a> <a href='#statementtail'>statementtail</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "statementlist"
        9 )
         log:outputString "\t</dd>\n" .
      ( "statements_optional"
        0 )
         log:outputString """  <dt><a name='statements_optional'>statements_optional</a></dt><dd>
""" .
      ( "statements_optional"
        5 )
         log:outputString """		<p><a href='#statement_or_rule'>statement_or_rule</a> <b><code>"."</code></b> <a href='#statements_optional'>statements_optional</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "statements_optional"
        9 )
         log:outputString "\t</dd>\n" .
      ( "statementtail"
        0 )
         log:outputString """  <dt><a name='statementtail'>statementtail</a></dt><dd>
""" .
      ( "statementtail"
        5 )
         log:outputString """		<p><b><code>"."</code></b> <a href='#statementlist'>statementlist</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "statementtail"
        9 )
         log:outputString "\t</dd>\n" .
      ( "string"
        0 )
         log:outputString """  <dt><a name='string'>string</a></dt><dd>
""" .
      ( "string"
        6 )
         log:outputString """	<p><em>(\"""[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*\""")|("[^"\\\\]*(?:\\\\.[^"\\\\]*)*")</em></p>
""" .
      ( "string"
        9 )
         log:outputString "\t</dd>\n" .
      ( "subject"
        0 )
         log:outputString """  <dt><a name='subject'>subject</a></dt><dd>
""" .
      ( "subject"
        5 )
         log:outputString """		<p><a href='#item'>item</a></p>
""" .
      ( "subject"
        9 )
         log:outputString "\t</dd>\n" .
      ( "symbol"
        0 )
         log:outputString """  <dt><a name='symbol'>symbol</a></dt><dd>
""" .
      ( "symbol"
        5 )
         log:outputString """		<p><a href='#explicituri'>explicituri</a></p>
""",
                """		<p><a href='#qname'>qname</a></p>
""" .
      ( "symbol"
        9 )
         log:outputString "\t</dd>\n" .
      ( "symbol_csl"
        0 )
         log:outputString """  <dt><a name='symbol_csl'>symbol_csl</a></dt><dd>
""" .
      ( "symbol_csl"
        5 )
         log:outputString """		<p><b><code>","</code></b> <a href='#symbol'>symbol</a> <a href='#symbol_csl'>symbol_csl</a></p>
""",
                """		<p><b><code>"."</code></b></p>
""" .
      ( "symbol_csl"
        9 )
         log:outputString "\t</dd>\n" .
      ( "universal"
        0 )
         log:outputString """  <dt><a name='universal'>universal</a></dt><dd>
""" .
      ( "universal"
        5 )
         log:outputString """		<p><b><code>"@forAll"</code></b> <a href='#symbol_csl'>symbol_csl</a></p>
""" .
      ( "universal"
        9 )
         log:outputString "\t</dd>\n" .
      ( "variable"
        0 )
         log:outputString """  <dt><a name='variable'>variable</a></dt><dd>
""" .
      ( "variable"
        6 )
         log:outputString """	<p><em>\\?[a-zA-Z_][a-zA-Z0-9_]*</em></p>
""" .
      ( "variable"
        9 )
         log:outputString "\t</dd>\n" .
      ( "verb"
        0 )
         log:outputString """  <dt><a name='verb'>verb</a></dt><dd>
""" .
      ( "verb"
        5 )
         log:outputString """		<p><a href='#prop'>prop</a></p>
""",
                """		<p><b><code>"="</code></b></p>
""",
                """		<p><b><code>"@a"</code></b></p>
""",
                """		<p><b><code>"@has"</code></b> <a href='#prop'>prop</a></p>
""",
                """		<p><b><code>"@is"</code></b> <a href='#prop'>prop</a> <b><code>"@of"</code></b></p>
""" .
      ( "verb"
        9 )
         log:outputString "\t</dd>\n" .
      ( "{"
        n:formula_safe
        "}" )
         a :SequenceTail .
      ( "{"
        n:formulacontent
        "}"
        "=>"
        "{"
        n:formula_safe
        "}" )
         a :Sequence,
                :SequenceTail .
      ( "{"
        n:formulacontent
        "}"
        "=>"
        "{"
        n:formulacontent
        "}" )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<b><code>"{"</code></b> <a href='#formulacontent'>formulacontent</a> <b><code>"}"</code></b> <b><code>"=>"</code></b> <b><code>"{"</code></b> <a href='#formulacontent'>formulacontent</a> <b><code>"}"</code></b>""" .
      ( "{"
        n:formulacontent
        "}" )
         a :SequenceTail;
         :seqlabel """<b><code>"{"</code></b> <a href='#formulacontent'>formulacontent</a> <b><code>"}"</code></b>""" .
      ( "}"
        "=>"
        "{"
        n:formula_safe
        "}" )
         a :SequenceTail .
      ( "}"
        "=>"
        "{"
        n:formulacontent
        "}" )
         a :SequenceTail;
         :seqlabel """<b><code>"}"</code></b> <b><code>"=>"</code></b> <b><code>"{"</code></b> <a href='#formulacontent'>formulacontent</a> <b><code>"}"</code></b>""" .
      ( "}" )
         a :SequenceTail;
         :seqlabel """<b><code>"}"</code></b>""" .
      ( "~~"
        9 )
         log:outputString "\n</dl>\n</html>\n" .
      ( bnf:eof )
         a :SequenceTail;
         :seqlabel "<em>EOF</em>" .
      ( n:barename
        <#_g6> )
         a :SequenceTail;
         :seqlabel "<a href='#barename'>barename</a> <a href='#barename_csl'>barename_csl</a>" .
      ( n:declaration
        <#_g0> )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#declaration'>declaration</a> <a href='#declaration_s'>declaration_s</a>" .
      ( n:declaration
        <#_g2> )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#declaration'>declaration</a> <a href='#declaration_s'>declaration_s</a>" .
      ( n:dtlang )
         a :SequenceTail;
         :seqlabel "<a href='#dtlang'>dtlang</a>" .
      ( n:existential
        <#_g1> )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#existential'>existential</a> <a href='#existential_s'>existential_s</a>" .
      ( n:existential
        <#_g3> )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#existential'>existential</a> <a href='#existential_s'>existential_s</a>" .
      ( n:explicituri
        "." )
         a :SequenceTail;
         :seqlabel """<a href='#explicituri'>explicituri</a> <b><code>"."</code></b>""" .
      ( n:explicituri )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#explicituri'>explicituri</a>" .
      ( n:formula_safe
        "}" )
         a :SequenceTail .
      ( n:formulacontent
        "}"
        "=>"
        "{"
        n:formula_safe
        "}" )
         a :SequenceTail .
      ( n:formulacontent
        "}"
        "=>"
        "{"
        n:formulacontent
        "}" )
         a :SequenceTail;
         :seqlabel """<a href='#formulacontent'>formulacontent</a> <b><code>"}"</code></b> <b><code>"=>"</code></b> <b><code>"{"</code></b> <a href='#formulacontent'>formulacontent</a> <b><code>"}"</code></b>""" .
      ( n:formulacontent
        "}" )
         a :SequenceTail;
         :seqlabel """<a href='#formulacontent'>formulacontent</a> <b><code>"}"</code></b>""" .
      ( n:item
        n:itemlist )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#item'>item</a> <a href='#itemlist'>itemlist</a>" .
      ( n:item )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#item'>item</a>" .
      ( n:itemlist
        ")" )
         a :SequenceTail;
         :seqlabel """<a href='#itemlist'>itemlist</a> <b><code>")"</code></b>""" .
      ( n:itemlist )
         a :SequenceTail;
         :seqlabel "<a href='#itemlist'>itemlist</a>" .
      ( n:langcode )
         a :SequenceTail;
         :seqlabel "<a href='#langcode'>langcode</a>" .
      ( n:literal )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#literal'>literal</a>" .
      ( n:node
        n:pathtail )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#node'>node</a> <a href='#pathtail'>pathtail</a>" .
      ( n:node )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#node'>node</a>" .
      ( n:numericliteral )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#numericliteral'>numericliteral</a>" .
      ( n:object
        n:objecttail
        n:propertylisttail )
         a :SequenceTail;
         :seqlabel "<a href='#object'>object</a> <a href='#objecttail'>objecttail</a> <a href='#propertylisttail'>propertylisttail</a>" .
      ( n:object
        n:objecttail )
         a :SequenceTail;
         :seqlabel "<a href='#object'>object</a> <a href='#objecttail'>objecttail</a>" .
      ( n:objecttail
        n:propertylisttail )
         a :SequenceTail;
         :seqlabel "<a href='#objecttail'>objecttail</a> <a href='#propertylisttail'>propertylisttail</a>" .
      ( n:objecttail )
         a :SequenceTail;
         :seqlabel "<a href='#objecttail'>objecttail</a>" .
      ( n:path )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#path'>path</a>" .
      ( n:pathtail )
         a :SequenceTail;
         :seqlabel "<a href='#pathtail'>pathtail</a>" .
      ( n:prop
        "@of" )
         a :SequenceTail;
         :seqlabel """<a href='#prop'>prop</a> <b><code>"@of"</code></b>""" .
      ( n:prop )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#prop'>prop</a>" .
      ( n:propertylist
        "]" )
         a :SequenceTail;
         :seqlabel """<a href='#propertylist'>propertylist</a> <b><code>"]"</code></b>""" .
      ( n:propertylist )
         a :SequenceTail;
         :seqlabel "<a href='#propertylist'>propertylist</a>" .
      ( n:propertylisttail )
         a :SequenceTail;
         :seqlabel "<a href='#propertylisttail'>propertylisttail</a>" .
      ( n:qname
        n:explicituri
        "." )
         a :SequenceTail;
         :seqlabel """<a href='#qname'>qname</a> <a href='#explicituri'>explicituri</a> <b><code>"."</code></b>""" .
      ( n:qname )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#qname'>qname</a>" .
      ( n:rule )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#rule'>rule</a>" .
      ( n:statement
        n:statementtail )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#statement'>statement</a> <a href='#statementtail'>statementtail</a>" .
      ( n:statement )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#statement'>statement</a>" .
      ( n:statement_or_rule
        "."
        n:statements_optional )
         a :Sequence,
                :SequenceTail;
         :seqlabel """<a href='#statement_or_rule'>statement_or_rule</a> <b><code>"."</code></b> <a href='#statements_optional'>statements_optional</a>""" .
      ( n:statementlist )
         a :SequenceTail;
         :seqlabel "<a href='#statementlist'>statementlist</a>" .
      ( n:statements_optional
        bnf:eof )
         a :SequenceTail;
         :seqlabel "<a href='#statements_optional'>statements_optional</a> <em>EOF</em>" .
      ( n:statements_optional )
         a :SequenceTail;
         :seqlabel "<a href='#statements_optional'>statements_optional</a>" .
      ( n:statementtail )
         a :SequenceTail;
         :seqlabel "<a href='#statementtail'>statementtail</a>" .
      ( n:string
        n:dtlang )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#string'>string</a> <a href='#dtlang'>dtlang</a>" .
      ( n:subject
        n:propertylist )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#subject'>subject</a> <a href='#propertylist'>propertylist</a>" .
      ( n:symbol
        <#_g4> )
         a :SequenceTail;
         :seqlabel "<a href='#symbol'>symbol</a> <a href='#symbol_csl'>symbol_csl</a>" .
      ( n:symbol
        <#_g5> )
         a :SequenceTail;
         :seqlabel "<a href='#symbol'>symbol</a> <a href='#symbol_csl'>symbol_csl</a>" .
      ( n:symbol )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#symbol'>symbol</a>" .
      ( n:variable )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#variable'>variable</a>" .
      ( n:verb
        n:object
        n:objecttail
        n:propertylisttail )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#verb'>verb</a> <a href='#object'>object</a> <a href='#objecttail'>objecttail</a> <a href='#propertylisttail'>propertylisttail</a>" .
      ( <#_g0>
        <#_g1>
        n:statements_optional
        bnf:eof )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#declaration_s'>declaration_s</a> <a href='#existential_s'>existential_s</a> <a href='#statements_optional'>statements_optional</a> <em>EOF</em>" .
      ( <#_g0> )
         a :SequenceTail;
         :seqlabel "<a href='#declaration_s'>declaration_s</a>" .
      ( <#_g1>
        n:statements_optional
        bnf:eof )
         a :SequenceTail;
         :seqlabel "<a href='#existential_s'>existential_s</a> <a href='#statements_optional'>statements_optional</a> <em>EOF</em>" .
      ( <#_g1> )
         a :SequenceTail;
         :seqlabel "<a href='#existential_s'>existential_s</a>" .
      ( <#_g2>
        <#_g3>
        n:statementlist )
         a :Sequence,
                :SequenceTail;
         :seqlabel "<a href='#declaration_s'>declaration_s</a> <a href='#existential_s'>existential_s</a> <a href='#statementlist'>statementlist</a>" .
      ( <#_g2> )
         a :SequenceTail;
         :seqlabel "<a href='#declaration_s'>declaration_s</a>" .
      ( <#_g3>
        n:statementlist )
         a :SequenceTail;
         :seqlabel "<a href='#existential_s'>existential_s</a> <a href='#statementlist'>statementlist</a>" .
      ( <#_g3> )
         a :SequenceTail;
         :seqlabel "<a href='#existential_s'>existential_s</a>" .
      ( <#_g4> )
         a :SequenceTail;
         :seqlabel "<a href='#symbol_csl'>symbol_csl</a>" .
      ( <#_g5> )
         a :SequenceTail;
         :seqlabel "<a href='#symbol_csl'>symbol_csl</a>" .
      ( <#_g6> )
         a :SequenceTail;
         :seqlabel "<a href='#barename_csl'>barename_csl</a>" .
    
    bnf:eof     :reference "<em>EOF</em>" .
    
    n:alphanumeric     a :Production;
         bnf:canStartWith "a";
         bnf:label "alphanumeric";
         bnf:matches "[a-zA-Z][a-zA-Z0-9_]*";
         :reference "<a href='#alphanumeric'>alphanumeric</a>" .
    
    n:barename     a :Production;
         bnf:canStartWith "_",
                "a";
         bnf:label "barename";
         bnf:matches "[a-zA-Z_][a-zA-Z0-9_]*";
         :reference "<a href='#barename'>barename</a>" .
    
    n:declaration     a :Production;
         bnf:canBeSequence  (
        "@base"
        n:explicituri
        "." ),
                 (
        "@keywords"
        <#_g6> ),
                 (
        "@prefix"
        n:qname
        n:explicituri
        "." );
         bnf:label "declaration";
         bnf:mustBeOneSequence  (
         (
            "@base"
            n:explicituri
            "." )
         (
            "@prefix"
            n:qname
            n:explicituri
            "." )
         (
            "@keywords"
            <#_g6> ) );
         :optionTail (),
                 (
         (
            "@base"
            n:explicituri
            "." )
         (
            "@prefix"
            n:qname
            n:explicituri
            "." )
         (
            "@keywords"
            <#_g6> ) ),
                 (
         (
            "@keywords"
            <#_g6> ) ),
                 (
         (
            "@prefix"
            n:qname
            n:explicituri
            "." )
         (
            "@keywords"
            <#_g6> ) );
         :reference "<a href='#declaration'>declaration</a>" .
    
    n:document     a rul:Used,
                :Production;
         bnf:canBeSequence  (
        <#_g0>
        <#_g1>
        n:statements_optional
        bnf:eof );
         bnf:label "document";
         bnf:mustBeOneSequence  (
         (
            <#_g0>
            <#_g1>
            n:statements_optional
            bnf:eof ) );
         :optionTail (),
                 (
         (
            <#_g0>
            <#_g1>
            n:statements_optional
            bnf:eof ) );
         :reference "<a href='#document'>document</a>" .
    
    n:dtlang     a :Production;
         bnf:canBeSequence (),
                 (
        "@"
        n:langcode ),
                 (
        "^^"
        n:symbol );
         bnf:label "dtlang";
         bnf:mustBeOneSequence  (
        ()
         (
            "@"
            n:langcode )
         (
            "^^"
            n:symbol ) );
         :optionTail (),
                 (
        ()
         (
            "@"
            n:langcode )
         (
            "^^"
            n:symbol ) ),
                 (
         (
            "@"
            n:langcode )
         (
            "^^"
            n:symbol ) ),
                 (
         (
            "^^"
            n:symbol ) );
         :reference "<a href='#dtlang'>dtlang</a>" .
    
    n:existential     a :Production;
         bnf:canBeSequence  (
        "@forSome"
        <#_g5> );
         bnf:label "existential";
         bnf:mustBeOneSequence  (
         (
            "@forSome"
            <#_g5> ) );
         :optionTail (),
                 (
         (
            "@forSome"
            <#_g5> ) );
         :reference "<a href='#existential'>existential</a>" .
    
    n:explicituri     a :Production;
         bnf:canStartWith "<";
         bnf:label "explicituri";
         bnf:matches "<[^>].*>";
         :reference "<a href='#explicituri'>explicituri</a>" .
    
    n:formulacontent     a :Production;
         bnf:canBeSequence  (
        <#_g2>
        <#_g3>
        n:statementlist );
         bnf:label "formulacontent";
         bnf:mustBeOneSequence  (
         (
            <#_g2>
            <#_g3>
            n:statementlist ) );
         :optionTail (),
                 (
         (
            <#_g2>
            <#_g3>
            n:statementlist ) );
         :reference "<a href='#formulacontent'>formulacontent</a>" .
    
    n:item     a :Production;
         bnf:canBeSequence  (
        n:path );
         bnf:label "item";
         bnf:mustBeOneSequence  (
         (
            n:path ) );
         :optionTail (),
                 (
         (
            n:path ) );
         :reference "<a href='#item'>item</a>" .
    
    n:itemlist     a :Production;
         bnf:canBeSequence (),
                 (
        n:item
        n:itemlist );
         bnf:label "itemlist";
         bnf:mustBeOneSequence  (
        ()
         (
            n:item
            n:itemlist ) );
         :optionTail (),
                 (
        ()
         (
            n:item
            n:itemlist ) ),
                 (
         (
            n:item
            n:itemlist ) );
         :reference "<a href='#itemlist'>itemlist</a>" .
    
    n:langcode     a :Production;
         bnf:canStartWith "a";
         bnf:label "langcode";
         bnf:matches "[a-zA-Z0-9]+(-[a-zA-Z0-9]+)?";
         :reference "<a href='#langcode'>langcode</a>" .
    
    n:literal     a :Production;
         bnf:canBeSequence  (
        n:string
        n:dtlang );
         bnf:label "literal";
         bnf:mustBeOneSequence  (
         (
            n:string
            n:dtlang ) );
         :optionTail (),
                 (
         (
            n:string
            n:dtlang ) );
         :reference "<a href='#literal'>literal</a>" .
    
    n:node     a :Production;
         bnf:canBeSequence  (
        "("
        n:itemlist
        ")" ),
                 (
        "["
        n:propertylist
        "]" ),
                 (
        n:literal ),
                 (
        n:numericliteral ),
                 (
        n:symbol ),
                 (
        n:variable );
         bnf:label "node";
         bnf:mustBeOneSequence  (
         (
            n:symbol )
         (
            n:variable )
         (
            n:numericliteral )
         (
            n:literal )
         (
            "["
            n:propertylist
            "]" )
         (
            "("
            n:itemlist
            ")" ) );
         :optionTail (),
                 (
         (
            "("
            n:itemlist
            ")" ) ),
                 (
         (
            "["
            n:propertylist
            "]" )
         (
            "("
            n:itemlist
            ")" ) ),
                 (
         (
            n:literal )
         (
            "["
            n:propertylist
            "]" )
         (
            "("
            n:itemlist
            ")" ) ),
                 (
         (
            n:numericliteral )
         (
            n:literal )
         (
            "["
            n:propertylist
            "]" )
         (
            "("
            n:itemlist
            ")" ) ),
                 (
         (
            n:symbol )
         (
            n:variable )
         (
            n:numericliteral )
         (
            n:literal )
         (
            "["
            n:propertylist
            "]" )
         (
            "("
            n:itemlist
            ")" ) ),
                 (
         (
            n:variable )
         (
            n:numericliteral )
         (
            n:literal )
         (
            "["
            n:propertylist
            "]" )
         (
            "("
            n:itemlist
            ")" ) );
         :reference "<a href='#node'>node</a>" .
    
    n:node_safe     a :Production;
         bnf:canBeSequence  (
        n:literal ),
                 (
        n:numericliteral ),
                 (
        n:symbol ),
                 (
        n:variable );
         bnf:label "node_safe";
         bnf:mustBeOneSequence  (
         (
            n:symbol )
         (
            n:variable )
         (
            n:numericliteral )
         (
            n:literal ) );
         :optionTail (),
                 (
         (
            n:literal ) ),
                 (
         (
            n:numericliteral )
         (
            n:literal ) ),
                 (
         (
            n:symbol )
         (
            n:variable )
         (
            n:numericliteral )
         (
            n:literal ) ),
                 (
         (
            n:variable )
         (
            n:numericliteral )
         (
            n:literal ) );
         :reference "<a href='#node_safe'>node_safe</a>" .
    
    n:numericliteral     a :Production;
         bnf:canStartWith "+",
                "-",
                "0";
         bnf:label "numericliteral";
         bnf:matches "[-+]?[0-9]+(\\.[0-9]+)?(e[-+]?[0-9]+)?";
         :reference "<a href='#numericliteral'>numericliteral</a>" .
    
    n:object     a :Production;
         bnf:canBeSequence  (
        n:item );
         bnf:label "object";
         bnf:mustBeOneSequence  (
         (
            n:item ) );
         :optionTail (),
                 (
         (
            n:item ) );
         :reference "<a href='#object'>object</a>" .
    
    n:objecttail     a :Production;
         bnf:canBeSequence (),
                 (
        ","
        n:object
        n:objecttail );
         bnf:label "objecttail";
         bnf:mustBeOneSequence  (
        ()
         (
            ","
            n:object
            n:objecttail ) );
         :optionTail (),
                 (
        ()
         (
            ","
            n:object
            n:objecttail ) ),
                 (
         (
            ","
            n:object
            n:objecttail ) );
         :reference "<a href='#objecttail'>objecttail</a>" .
    
    n:path     a :Production;
         bnf:canBeSequence  (
        n:node
        n:pathtail );
         bnf:label "path";
         bnf:mustBeOneSequence  (
         (
            n:node
            n:pathtail ) );
         :optionTail (),
                 (
         (
            n:node
            n:pathtail ) );
         :reference "<a href='#path'>path</a>" .
    
    n:pathtail     a :Production;
         bnf:canBeSequence (),
                 (
        "!"
        n:path ),
                 (
        "^"
        n:path );
         bnf:label "pathtail";
         bnf:mustBeOneSequence  (
        ()
         (
            "!"
            n:path )
         (
            "^"
            n:path ) );
         :optionTail (),
                 (
        ()
         (
            "!"
            n:path )
         (
            "^"
            n:path ) ),
                 (
         (
            "!"
            n:path )
         (
            "^"
            n:path ) ),
                 (
         (
            "^"
            n:path ) );
         :reference "<a href='#pathtail'>pathtail</a>" .
    
    n:prop     a :Production;
         bnf:canBeSequence  (
        n:node );
         bnf:label "prop";
         bnf:mustBeOneSequence  (
         (
            n:node ) );
         :optionTail (),
                 (
         (
            n:node ) );
         :reference "<a href='#prop'>prop</a>" .
    
    n:propertylist     a :Production;
         bnf:canBeSequence (),
                 (
        n:verb
        n:object
        n:objecttail
        n:propertylisttail );
         bnf:label "propertylist";
         bnf:mustBeOneSequence  (
        ()
         (
            n:verb
            n:object
            n:objecttail
            n:propertylisttail ) );
         :optionTail (),
                 (
        ()
         (
            n:verb
            n:object
            n:objecttail
            n:propertylisttail ) ),
                 (
         (
            n:verb
            n:object
            n:objecttail
            n:propertylisttail ) );
         :reference "<a href='#propertylist'>propertylist</a>" .
    
    n:propertylisttail     a :Production;
         bnf:canBeSequence (),
                 (
        ";"
        n:propertylist );
         bnf:label "propertylisttail";
         bnf:mustBeOneSequence  (
        ()
         (
            ";"
            n:propertylist ) );
         :optionTail (),
                 (
        ()
         (
            ";"
            n:propertylist ) ),
                 (
         (
            ";"
            n:propertylist ) );
         :reference "<a href='#propertylisttail'>propertylisttail</a>" .
    
    n:qname     a :Production;
         bnf:canStartWith "_",
                "a";
         bnf:label "qname";
         bnf:matches "(([a-zA-Z_][a-zA-Z0-9_]*)?:)?([a-zA-Z_][a-zA-Z0-9_]*)?";
         :reference "<a href='#qname'>qname</a>" .
    
    n:rule     a :Production;
         bnf:canBeSequence  (
        "{"
        n:formulacontent
        "}"
        "=>"
        "{"
        n:formulacontent
        "}" );
         bnf:label "rule";
         bnf:mustBeOneSequence  (
         (
            "{"
            n:formulacontent
            "}"
            "=>"
            "{"
            n:formulacontent
            "}" ) );
         :optionTail (),
                 (
         (
            "{"
            n:formulacontent
            "}"
            "=>"
            "{"
            n:formulacontent
            "}" ) );
         :reference "<a href='#rule'>rule</a>" .
    
    n:rule_safe     a :Production;
         bnf:canBeSequence  (
        "{"
        n:formulacontent
        "}"
        "=>"
        "{"
        n:formula_safe
        "}" );
         bnf:label "rule_safe";
         bnf:mustBeOneSequence  (
         (
            "{"
            n:formulacontent
            "}"
            "=>"
            "{"
            n:formula_safe
            "}" ) );
         :optionTail (),
                 (
         (
            "{"
            n:formulacontent
            "}"
            "=>"
            "{"
            n:formula_safe
            "}" ) );
         :reference "<a href='#rule_safe'>rule_safe</a>" .
    
    n:statement     a :Production;
         bnf:canBeSequence  (
        n:subject
        n:propertylist );
         bnf:label "statement";
         bnf:mustBeOneSequence  (
         (
            n:subject
            n:propertylist ) );
         :optionTail (),
                 (
         (
            n:subject
            n:propertylist ) );
         :reference "<a href='#statement'>statement</a>" .
    
    n:statement_or_rule     a :Production;
         bnf:canBeSequence  (
        n:rule ),
                 (
        n:statement );
         bnf:label "statement_or_rule";
         bnf:mustBeOneSequence  (
         (
            n:statement )
         (
            n:rule ) );
         :optionTail (),
                 (
         (
            n:rule ) ),
                 (
         (
            n:statement )
         (
            n:rule ) );
         :reference "<a href='#statement_or_rule'>statement_or_rule</a>" .
    
    n:statementlist     a :Production;
         bnf:canBeSequence (),
                 (
        n:statement
        n:statementtail );
         bnf:label "statementlist";
         bnf:mustBeOneSequence  (
        ()
         (
            n:statement
            n:statementtail ) );
         :optionTail (),
                 (
        ()
         (
            n:statement
            n:statementtail ) ),
                 (
         (
            n:statement
            n:statementtail ) );
         :reference "<a href='#statementlist'>statementlist</a>" .
    
    n:statements_optional     a :Production;
         bnf:canBeSequence (),
                 (
        n:statement_or_rule
        "."
        n:statements_optional );
         bnf:label "statements_optional";
         bnf:mustBeOneSequence  (
        ()
         (
            n:statement_or_rule
            "."
            n:statements_optional ) );
         :optionTail (),
                 (
        ()
         (
            n:statement_or_rule
            "."
            n:statements_optional ) ),
                 (
         (
            n:statement_or_rule
            "."
            n:statements_optional ) );
         :reference "<a href='#statements_optional'>statements_optional</a>" .
    
    n:statementtail     a :Production;
         bnf:canBeSequence (),
                 (
        "."
        n:statementlist );
         bnf:label "statementtail";
         bnf:mustBeOneSequence  (
        ()
         (
            "."
            n:statementlist ) );
         :optionTail (),
                 (
        ()
         (
            "."
            n:statementlist ) ),
                 (
         (
            "."
            n:statementlist ) );
         :reference "<a href='#statementtail'>statementtail</a>" .
    
    n:string     a :Production;
         bnf:canStartWith "\"";
         bnf:label "string";
         bnf:matches """(\"""[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*\""")|("[^"\\\\]*(?:\\\\.[^"\\\\]*)*")""";
         :reference "<a href='#string'>string</a>" .
    
    n:subject     a :Production;
         bnf:canBeSequence  (
        n:item );
         bnf:label "subject";
         bnf:mustBeOneSequence  (
         (
            n:item ) );
         :optionTail (),
                 (
         (
            n:item ) );
         :reference "<a href='#subject'>subject</a>" .
    
    n:symbol     a :Production;
         bnf:canBeSequence  (
        n:explicituri ),
                 (
        n:qname );
         bnf:label "symbol";
         bnf:mustBeOneSequence  (
         (
            n:explicituri )
         (
            n:qname ) );
         :optionTail (),
                 (
         (
            n:explicituri )
         (
            n:qname ) ),
                 (
         (
            n:qname ) );
         :reference "<a href='#symbol'>symbol</a>" .
    
    n:universal     a :Production;
         bnf:canBeSequence  (
        "@forAll"
        <#_g4> );
         bnf:label "universal";
         bnf:mustBeOneSequence  (
         (
            "@forAll"
            <#_g4> ) );
         :optionTail (),
                 (
         (
            "@forAll"
            <#_g4> ) );
         :reference "<a href='#universal'>universal</a>" .
    
    n:variable     a :Production;
         bnf:canStartWith "?";
         bnf:label "variable";
         bnf:matches "\\?[a-zA-Z_][a-zA-Z0-9_]*";
         :reference "<a href='#variable'>variable</a>" .
    
    n:verb     a :Production;
         bnf:canBeSequence  (
        "=" ),
                 (
        "@a" ),
                 (
        "@has"
        n:prop ),
                 (
        "@is"
        n:prop
        "@of" ),
                 (
        n:prop );
         bnf:label "verb";
         bnf:mustBeOneSequence  (
         (
            n:prop )
         (
            "@has"
            n:prop )
         (
            "@is"
            n:prop
            "@of" )
         (
            "@a" )
         (
            "=" ) );
         :optionTail (),
                 (
         (
            "=" ) ),
                 (
         (
            "@a" )
         (
            "=" ) ),
                 (
         (
            "@has"
            n:prop )
         (
            "@is"
            n:prop
            "@of" )
         (
            "@a" )
         (
            "=" ) ),
                 (
         (
            "@is"
            n:prop
            "@of" )
         (
            "@a" )
         (
            "=" ) ),
                 (
         (
            n:prop )
         (
            "@has"
            n:prop )
         (
            "@is"
            n:prop
            "@of" )
         (
            "@a" )
         (
            "=" ) );
         :reference "<a href='#verb'>verb</a>" .
    
    <#_g0>     a :Production;
         bnf:canBeSequence (),
                 (
        n:declaration
        <#_g0> );
         bnf:label "declaration_s";
         bnf:mustBeOneSequence  (
        ()
         (
            n:declaration
            <#_g0> ) );
         bnf:zeroOrMore n:declaration;
         :optionTail (),
                 (
        ()
         (
            n:declaration
            <#_g0> ) ),
                 (
         (
            n:declaration
            <#_g0> ) );
         :reference "<a href='#declaration_s'>declaration_s</a>" .
    
    <#_g1>     a :Production;
         bnf:canBeSequence (),
                 (
        n:existential
        <#_g1> );
         bnf:label "existential_s";
         bnf:mustBeOneSequence  (
        ()
         (
            n:existential
            <#_g1> ) );
         bnf:zeroOrMore n:existential;
         :optionTail (),
                 (
        ()
         (
            n:existential
            <#_g1> ) ),
                 (
         (
            n:existential
            <#_g1> ) );
         :reference "<a href='#existential_s'>existential_s</a>" .
    
    <#_g2>     a :Production;
         bnf:canBeSequence (),
                 (
        n:declaration
        <#_g2> );
         bnf:label "declaration_s";
         bnf:mustBeOneSequence  (
        ()
         (
            n:declaration
            <#_g2> ) );
         bnf:zeroOrMore n:declaration;
         :optionTail (),
                 (
        ()
         (
            n:declaration
            <#_g2> ) ),
                 (
         (
            n:declaration
            <#_g2> ) );
         :reference "<a href='#declaration_s'>declaration_s</a>" .
    
    <#_g3>     a :Production;
         bnf:canBeSequence (),
                 (
        n:existential
        <#_g3> );
         bnf:label "existential_s";
         bnf:mustBeOneSequence  (
        ()
         (
            n:existential
            <#_g3> ) );
         bnf:zeroOrMore n:existential;
         :optionTail (),
                 (
        ()
         (
            n:existential
            <#_g3> ) ),
                 (
         (
            n:existential
            <#_g3> ) );
         :reference "<a href='#existential_s'>existential_s</a>" .
    
    <#_g4>     a :Production;
         bnf:canBeSequence  (
        ","
        n:symbol
        <#_g4> ),
                 (
        "." );
         bnf:commaSeparatedPeriodTerminatedListOf n:symbol;
         bnf:label "symbol_csl";
         bnf:mustBeOneSequence  (
         (
            "." )
         (
            ","
            n:symbol
            <#_g4> ) );
         :optionTail (),
                 (
         (
            ","
            n:symbol
            <#_g4> ) ),
                 (
         (
            "." )
         (
            ","
            n:symbol
            <#_g4> ) );
         :reference "<a href='#symbol_csl'>symbol_csl</a>" .
    
    <#_g5>     a :Production;
         bnf:canBeSequence  (
        ","
        n:symbol
        <#_g5> ),
                 (
        "." );
         bnf:commaSeparatedPeriodTerminatedListOf n:symbol;
         bnf:label "symbol_csl";
         bnf:mustBeOneSequence  (
         (
            "." )
         (
            ","
            n:symbol
            <#_g5> ) );
         :optionTail (),
                 (
         (
            ","
            n:symbol
            <#_g5> ) ),
                 (
         (
            "." )
         (
            ","
            n:symbol
            <#_g5> ) );
         :reference "<a href='#symbol_csl'>symbol_csl</a>" .
    
    <#_g6>     a :Production;
         bnf:canBeSequence  (
        ","
        n:barename
        <#_g6> ),
                 (
        "." );
         bnf:commaSeparatedPeriodTerminatedListOf n:barename;
         bnf:label "barename_csl";
         bnf:mustBeOneSequence  (
         (
            "." )
         (
            ","
            n:barename
            <#_g6> ) );
         :optionTail (),
                 (
         (
            ","
            n:barename
            <#_g6> ) ),
                 (
         (
            "." )
         (
            ","
            n:barename
            <#_g6> ) );
         :reference "<a href='#barename_csl'>barename_csl</a>" .
    
#ENDS
