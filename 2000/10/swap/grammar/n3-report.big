     @prefix : <http://www.w3.org/2000/10/swap/grammar/n3#> .
    @prefix cfg: <http://www.w3.org/2000/10/swap/grammar/bnf#> .
    @prefix h: <http://www.w3.org/2000/10/swap/grammar/bnf2html#> .
    @prefix log: <http://www.w3.org/2000/10/swap/log#> .
    @prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
    @prefix rul: <http://www.w3.org/2000/10/swap/grammar/bnf-rules#> .
    
     @forSome <#_g0>,
                <#_g1>,
                <#_g2>,
                <#_g3>,
                <#_g4>,
                <#_g5> .
    
    "!"     h:reference """<b><code>"!"</code></b>""" .
    
    "("     h:reference """<b><code>"("</code></b>""" .
    
    ")"     h:reference """<b><code>")"</code></b>""" .
    
    ","     h:reference """<b><code>","</code></b>""" .
    
    "."     h:reference """<b><code>"."</code></b>""" .
    
    "/"     h:reference """<b><code>"/"</code></b>""" .
    
    ";"     h:reference """<b><code>";"</code></b>""" .
    
    "<="     h:reference """<b><code>"<="</code></b>""" .
    
    "="     h:reference """<b><code>"="</code></b>""" .
    
    "=>"     h:reference """<b><code>"=>"</code></b>""" .
    
    "@"     h:reference """<b><code>"@"</code></b>""" .
    
    "@a"     h:reference """<b><code>"@a"</code></b>""" .
    
    "@base"     h:reference """<b><code>"@base"</code></b>""" .
    
    "@false"     h:reference """<b><code>"@false"</code></b>""" .
    
    "@forAll"     h:reference """<b><code>"@forAll"</code></b>""" .
    
    "@forSome"     h:reference """<b><code>"@forSome"</code></b>""" .
    
    "@has"     h:reference """<b><code>"@has"</code></b>""" .
    
    "@is"     h:reference """<b><code>"@is"</code></b>""" .
    
    "@keywords"     h:reference """<b><code>"@keywords"</code></b>""" .
    
    "@of"     h:reference """<b><code>"@of"</code></b>""" .
    
    "@prefix"     h:reference """<b><code>"@prefix"</code></b>""" .
    
    "@true"     h:reference """<b><code>"@true"</code></b>""" .
    
    "["     h:reference """<b><code>"["</code></b>""" .
    
    "]"     h:reference """<b><code>"]"</code></b>""" .
    
    "^"     h:reference """<b><code>"^"</code></b>""" .
    
    "^^"     h:reference """<b><code>"^^"</code></b>""" .
    
    "{"     h:reference """<b><code>"{"</code></b>""" .
    
    "}"     h:reference """<b><code>"}"</code></b>""" .
    
    ()     a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<em>void</em>" .
      ( "!"
        :expression )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"!"</code></b> <a href='#expression'>expression</a>""" .
      ( "("
        :pathlist
        ")" )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"("</code></b> <a href='#pathlist'>pathlist</a> <b><code>")"</code></b>""" .
      ( ")" )
         a h:SequenceTail;
         h:seqlabel """<b><code>")"</code></b>""" .
      ( ","
        :barename
        <#_g3> )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>","</code></b> <a href='#barename'>barename</a> <a href='#barename_csl_tail'>barename_csl_tail</a>""" .
      ( ","
        :object
        :objecttail )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>","</code></b> <a href='#object'>object</a> <a href='#objecttail'>objecttail</a>""" .
      ( ","
        :symbol
        <#_g4> )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>","</code></b> <a href='#symbol'>symbol</a> <a href='#symbol_csl_tail'>symbol_csl_tail</a>""" .
      ( ","
        :symbol
        <#_g5> )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>","</code></b> <a href='#symbol'>symbol</a> <a href='#symbol_csl_tail'>symbol_csl_tail</a>""" .
      ( "."
        :statementlist )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"."</code></b> <a href='#statementlist'>statementlist</a>""" .
      ( "."
        :statements_optional )
         a h:SequenceTail;
         h:seqlabel """<b><code>"."</code></b> <a href='#statements_optional'>statements_optional</a>""" .
      ( "/"
        :unsignedint )
         a h:SequenceTail;
         h:seqlabel """<b><code>"/"</code></b> <a href='#unsignedint'>unsignedint</a>""" .
      ( "0"
        0 )
         log:outputString """<html>
<head>
   <title>BNF</title>
</head>
<body>
  <h1>BNF</h1>
  <p>Productions are in normal type, linked to their definitions.<br />
    <em>Regular expressions are in italics</em><br />
    <b><code>Literal characters in quoted in bold</code></b><br />
    <em>void</em> means an empty production.
  </p>
  <dl>
""" .
      ( ";"
        :propertylist )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>";"</code></b> <a href='#propertylist'>propertylist</a>""" .
      ( "<=" )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"<="</code></b>""" .
      ( "=" )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"="</code></b>""" .
      ( "=>" )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"=>"</code></b>""" .
      ( "@"
        :langcode )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"@"</code></b> <a href='#langcode'>langcode</a>""" .
      ( "@a" )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"@a"</code></b>""" .
      ( "@base"
        :explicituri )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"@base"</code></b> <a href='#explicituri'>explicituri</a>""" .
      ( "@false" )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"@false"</code></b>""" .
      ( "@forAll"
        <#_g0> )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"@forAll"</code></b> <a href='#symbol_csl'>symbol_csl</a>""" .
      ( "@forSome"
        <#_g1> )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"@forSome"</code></b> <a href='#symbol_csl'>symbol_csl</a>""" .
      ( "@has"
        :expression )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"@has"</code></b> <a href='#expression'>expression</a>""" .
      ( "@is"
        :expression
        "@of" )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"@is"</code></b> <a href='#expression'>expression</a> <b><code>"@of"</code></b>""" .
      ( "@keywords"
        <#_g2> )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"@keywords"</code></b> <a href='#barename_csl'>barename_csl</a>""" .
      ( "@of" )
         a h:SequenceTail;
         h:seqlabel """<b><code>"@of"</code></b>""" .
      ( "@prefix"
        :prefix
        :explicituri )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"@prefix"</code></b> <a href='#prefix'>prefix</a> <a href='#explicituri'>explicituri</a>""" .
      ( "@true" )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"@true"</code></b>""" .
      ( "["
        :propertylist
        "]" )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"["</code></b> <a href='#propertylist'>propertylist</a> <b><code>"]"</code></b>""" .
      ( "]" )
         a h:SequenceTail;
         h:seqlabel """<b><code>"]"</code></b>""" .
      ( "^"
        :expression )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"^"</code></b> <a href='#expression'>expression</a>""" .
      ( "^^"
        :symbol )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"^^"</code></b> <a href='#symbol'>symbol</a>""" .
      ( "barename"
        0 )
         log:outputString """  <dt><a name='barename'>barename</a></dt><dd>
""" .
      ( "barename"
        6 )
         log:outputString """	<p><em>[A-Z_a-z√Ä-√ñ√ò-√∂√∏-ÀøÕ∞-ÕΩÕø-·øø‚Äå-‚Äç‚Å∞-‚Üè‚∞Ä-‚øØ„ÄÅ-ÌüøÔ§Ä-Ô∑èÔ∑∞-ÔøΩêÄÄ-ÛØøø][\\-0-9A-Z_a-z¬∑√Ä-√ñ√ò-√∂√∏-ÕΩÕø-·øø‚Äå-‚Äç‚Äø-‚ÅÄ‚Å∞-‚Üè‚∞Ä-‚øØ„ÄÅ-ÌüøÔ§Ä-Ô∑èÔ∑∞-ÔøΩêÄÄ-ÛØøø]*</em></p>
""" .
      ( "barename"
        9 )
         log:outputString "\t</dd>\n" .
      ( "barename_csl"
        0 )
         log:outputString """  <dt><a name='barename_csl'>barename_csl</a></dt><dd>
""" .
      ( "barename_csl"
        5 )
         log:outputString """		<p><a href='#barename'>barename</a> <a href='#barename_csl_tail'>barename_csl_tail</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "barename_csl"
        9 )
         log:outputString "\t</dd>\n" .
      ( "barename_csl_tail"
        0 )
         log:outputString """  <dt><a name='barename_csl_tail'>barename_csl_tail</a></dt><dd>
""" .
      ( "barename_csl_tail"
        5 )
         log:outputString """		<p><b><code>","</code></b> <a href='#barename'>barename</a> <a href='#barename_csl_tail'>barename_csl_tail</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "barename_csl_tail"
        9 )
         log:outputString "\t</dd>\n" .
      ( "boolean"
        0 )
         log:outputString """  <dt><a name='boolean'>boolean</a></dt><dd>
""" .
      ( "boolean"
        5 )
         log:outputString """		<p><b><code>"@false"</code></b></p>
""",
                """		<p><b><code>"@true"</code></b></p>
""" .
      ( "boolean"
        9 )
         log:outputString "\t</dd>\n" .
      ( "date"
        0 )
         log:outputString """  <dt><a name='date'>date</a></dt><dd>
""" .
      ( "date"
        6 )
         log:outputString """	<p><em>[0-9][0-9]-[0-9][0-9]-[0-9][0-9]Z?</em></p>
""" .
      ( "date"
        9 )
         log:outputString "\t</dd>\n" .
      ( "dateTime"
        0 )
         log:outputString """  <dt><a name='dateTime'>dateTime</a></dt><dd>
""" .
      ( "dateTime"
        6 )
         log:outputString """	<p><em>[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9](T[0-9][0-9]:[0-9][0-9](:[0-9][0-9](\\.[0-9]*)?)?)?Z?</em></p>
""" .
      ( "dateTime"
        9 )
         log:outputString "\t</dd>\n" .
      ( "decimal"
        0 )
         log:outputString """  <dt><a name='decimal'>decimal</a></dt><dd>
""" .
      ( "decimal"
        6 )
         log:outputString """	<p><em>[-+]?[0-9]+\\.[0-9]*</em></p>
""" .
      ( "decimal"
        9 )
         log:outputString "\t</dd>\n" .
      ( "declaration"
        0 )
         log:outputString """  <dt><a name='declaration'>declaration</a></dt><dd>
""" .
      ( "declaration"
        5 )
         log:outputString """		<p><b><code>"@base"</code></b> <a href='#explicituri'>explicituri</a></p>
""",
                """		<p><b><code>"@keywords"</code></b> <a href='#barename_csl'>barename_csl</a></p>
""",
                """		<p><b><code>"@prefix"</code></b> <a href='#prefix'>prefix</a> <a href='#explicituri'>explicituri</a></p>
""" .
      ( "declaration"
        9 )
         log:outputString "\t</dd>\n" .
      ( "document"
        0 )
         log:outputString """  <dt><a name='document'>document</a></dt><dd>
""" .
      ( "document"
        5 )
         log:outputString """		<p><a href='#statements_optional'>statements_optional</a> <em>EOF</em></p>
""" .
      ( "document"
        9 )
         log:outputString "\t</dd>\n" .
      ( "double"
        0 )
         log:outputString """  <dt><a name='double'>double</a></dt><dd>
""" .
      ( "double"
        6 )
         log:outputString """	<p><em>[-+]?[0-9]+(\\.[0-9]+)?([eE][-+]?[0-9]+)</em></p>
""" .
      ( "double"
        9 )
         log:outputString "\t</dd>\n" .
      ( "dtlang"
        0 )
         log:outputString """  <dt><a name='dtlang'>dtlang</a></dt><dd>
""" .
      ( "dtlang"
        5 )
         log:outputString """		<p><b><code>"@"</code></b> <a href='#langcode'>langcode</a></p>
""",
                """		<p><b><code>"^^"</code></b> <a href='#symbol'>symbol</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "dtlang"
        9 )
         log:outputString "\t</dd>\n" .
      ( "existential"
        0 )
         log:outputString """  <dt><a name='existential'>existential</a></dt><dd>
""" .
      ( "existential"
        5 )
         log:outputString """		<p><b><code>"@forSome"</code></b> <a href='#symbol_csl'>symbol_csl</a></p>
""" .
      ( "existential"
        9 )
         log:outputString "\t</dd>\n" .
      ( "explicituri"
        0 )
         log:outputString """  <dt><a name='explicituri'>explicituri</a></dt><dd>
""" .
      ( "explicituri"
        6 )
         log:outputString """	<p><em><[^>]*></em></p>
""" .
      ( "explicituri"
        9 )
         log:outputString "\t</dd>\n" .
      ( "expression"
        0 )
         log:outputString """  <dt><a name='expression'>expression</a></dt><dd>
""" .
      ( "expression"
        5 )
         log:outputString """		<p><a href='#pathitem'>pathitem</a> <a href='#pathtail'>pathtail</a></p>
""" .
      ( "expression"
        9 )
         log:outputString "\t</dd>\n" .
      ( "formulacontent"
        0 )
         log:outputString """  <dt><a name='formulacontent'>formulacontent</a></dt><dd>
""" .
      ( "formulacontent"
        5 )
         log:outputString """		<p><a href='#statementlist'>statementlist</a></p>
""" .
      ( "formulacontent"
        9 )
         log:outputString "\t</dd>\n" .
      ( "integer"
        0 )
         log:outputString """  <dt><a name='integer'>integer</a></dt><dd>
""" .
      ( "integer"
        6 )
         log:outputString """	<p><em>[-+]?[0-9]+</em></p>
""" .
      ( "integer"
        9 )
         log:outputString "\t</dd>\n" .
      ( "langcode"
        0 )
         log:outputString """  <dt><a name='langcode'>langcode</a></dt><dd>
""" .
      ( "langcode"
        6 )
         log:outputString """	<p><em>[a-z]+(-[a-z0-9]+)*</em></p>
""" .
      ( "langcode"
        9 )
         log:outputString "\t</dd>\n" .
      ( "literal"
        0 )
         log:outputString """  <dt><a name='literal'>literal</a></dt><dd>
""" .
      ( "literal"
        5 )
         log:outputString """		<p><a href='#string'>string</a> <a href='#dtlang'>dtlang</a></p>
""" .
      ( "literal"
        9 )
         log:outputString "\t</dd>\n" .
      ( "numericliteral"
        0 )
         log:outputString """  <dt><a name='numericliteral'>numericliteral</a></dt><dd>
""" .
      ( "numericliteral"
        5 )
         log:outputString """		<p><a href='#decimal'>decimal</a></p>
""",
                """		<p><a href='#double'>double</a></p>
""",
                """		<p><a href='#integer'>integer</a></p>
""",
                """		<p><a href='#rational'>rational</a></p>
""" .
      ( "numericliteral"
        9 )
         log:outputString "\t</dd>\n" .
      ( "object"
        0 )
         log:outputString """  <dt><a name='object'>object</a></dt><dd>
""" .
      ( "object"
        5 )
         log:outputString """		<p><a href='#expression'>expression</a></p>
""" .
      ( "object"
        9 )
         log:outputString "\t</dd>\n" .
      ( "objecttail"
        0 )
         log:outputString """  <dt><a name='objecttail'>objecttail</a></dt><dd>
""" .
      ( "objecttail"
        5 )
         log:outputString """		<p><b><code>","</code></b> <a href='#object'>object</a> <a href='#objecttail'>objecttail</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "objecttail"
        9 )
         log:outputString "\t</dd>\n" .
      ( "pathitem"
        0 )
         log:outputString """  <dt><a name='pathitem'>pathitem</a></dt><dd>
""" .
      ( "pathitem"
        5 )
         log:outputString """		<p><a href='#boolean'>boolean</a></p>
""",
                """		<p><a href='#literal'>literal</a></p>
""",
                """		<p><a href='#numericliteral'>numericliteral</a></p>
""",
                """		<p><a href='#quickvariable'>quickvariable</a></p>
""",
                """		<p><a href='#symbol'>symbol</a></p>
""",
                """		<p><b><code>"("</code></b> <a href='#pathlist'>pathlist</a> <b><code>")"</code></b></p>
""",
                """		<p><b><code>"["</code></b> <a href='#propertylist'>propertylist</a> <b><code>"]"</code></b></p>
""",
                """		<p><b><code>"{"</code></b> <a href='#formulacontent'>formulacontent</a> <b><code>"}"</code></b></p>
""" .
      ( "pathitem"
        9 )
         log:outputString "\t</dd>\n" .
      ( "pathlist"
        0 )
         log:outputString """  <dt><a name='pathlist'>pathlist</a></dt><dd>
""" .
      ( "pathlist"
        5 )
         log:outputString """		<p><a href='#expression'>expression</a> <a href='#pathlist'>pathlist</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "pathlist"
        9 )
         log:outputString "\t</dd>\n" .
      ( "pathtail"
        0 )
         log:outputString """  <dt><a name='pathtail'>pathtail</a></dt><dd>
""" .
      ( "pathtail"
        5 )
         log:outputString """		<p><b><code>"!"</code></b> <a href='#expression'>expression</a></p>
""",
                """		<p><b><code>"^"</code></b> <a href='#expression'>expression</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "pathtail"
        9 )
         log:outputString "\t</dd>\n" .
      ( "predicate"
        0 )
         log:outputString """  <dt><a name='predicate'>predicate</a></dt><dd>
""" .
      ( "predicate"
        5 )
         log:outputString """		<p><a href='#expression'>expression</a></p>
""",
                """		<p><b><code>"<="</code></b></p>
""",
                """		<p><b><code>"="</code></b></p>
""",
                """		<p><b><code>"=>"</code></b></p>
""",
                """		<p><b><code>"@a"</code></b></p>
""",
                """		<p><b><code>"@has"</code></b> <a href='#expression'>expression</a></p>
""",
                """		<p><b><code>"@is"</code></b> <a href='#expression'>expression</a> <b><code>"@of"</code></b></p>
""" .
      ( "predicate"
        9 )
         log:outputString "\t</dd>\n" .
      ( "prefix"
        0 )
         log:outputString """  <dt><a name='prefix'>prefix</a></dt><dd>
""" .
      ( "prefix"
        6 )
         log:outputString """	<p><em>([A-Z_a-z√Ä-√ñ√ò-√∂√∏-ÀøÕ∞-ÕΩÕø-·øø‚Äå-‚Äç‚Å∞-‚Üè‚∞Ä-‚øØ„ÄÅ-ÌüøÔ§Ä-Ô∑èÔ∑∞-ÔøΩêÄÄ-ÛØøø][\\-0-9A-Z_a-z¬∑√Ä-√ñ√ò-√∂√∏-ÕΩÕø-·øø‚Äå-‚Äç‚Äø-‚ÅÄ‚Å∞-‚Üè‚∞Ä-‚øØ„ÄÅ-ÌüøÔ§Ä-Ô∑èÔ∑∞-ÔøΩêÄÄ-ÛØøø]*)?:</em></p>
""" .
      ( "prefix"
        9 )
         log:outputString "\t</dd>\n" .
      ( "propertylist"
        0 )
         log:outputString """  <dt><a name='propertylist'>propertylist</a></dt><dd>
""" .
      ( "propertylist"
        5 )
         log:outputString """		<p><a href='#predicate'>predicate</a> <a href='#object'>object</a> <a href='#objecttail'>objecttail</a> <a href='#propertylisttail'>propertylisttail</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "propertylist"
        9 )
         log:outputString "\t</dd>\n" .
      ( "propertylisttail"
        0 )
         log:outputString """  <dt><a name='propertylisttail'>propertylisttail</a></dt><dd>
""" .
      ( "propertylisttail"
        5 )
         log:outputString """		<p><b><code>";"</code></b> <a href='#propertylist'>propertylist</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "propertylisttail"
        9 )
         log:outputString "\t</dd>\n" .
      ( "qname"
        0 )
         log:outputString """  <dt><a name='qname'>qname</a></dt><dd>
""" .
      ( "qname"
        6 )
         log:outputString """	<p><em>(([A-Z_a-z√Ä-√ñ√ò-√∂√∏-ÀøÕ∞-ÕΩÕø-·øø‚Äå-‚Äç‚Å∞-‚Üè‚∞Ä-‚øØ„ÄÅ-ÌüøÔ§Ä-Ô∑èÔ∑∞-ÔøΩêÄÄ-ÛØøø][\\-0-9A-Z_a-z¬∑√Ä-√ñ√ò-√∂√∏-ÕΩÕø-·øø‚Äå-‚Äç‚Äø-‚ÅÄ‚Å∞-‚Üè‚∞Ä-‚øØ„ÄÅ-ÌüøÔ§Ä-Ô∑èÔ∑∞-ÔøΩêÄÄ-ÛØøø]*)?:)?[A-Z_a-z√Ä-√ñ√ò-√∂√∏-ÀøÕ∞-ÕΩÕø-·øø‚Äå-‚Äç‚Å∞-‚Üè‚∞Ä-‚øØ„ÄÅ-ÌüøÔ§Ä-Ô∑èÔ∑∞-ÔøΩêÄÄ-ÛØøø][\\-0-9A-Z_a-z¬∑√Ä-√ñ√ò-√∂√∏-ÕΩÕø-·øø‚Äå-‚Äç‚Äø-‚ÅÄ‚Å∞-‚Üè‚∞Ä-‚øØ„ÄÅ-ÌüøÔ§Ä-Ô∑èÔ∑∞-ÔøΩêÄÄ-ÛØøø]*</em></p>
""" .
      ( "qname"
        9 )
         log:outputString "\t</dd>\n" .
      ( "quickvariable"
        0 )
         log:outputString """  <dt><a name='quickvariable'>quickvariable</a></dt><dd>
""" .
      ( "quickvariable"
        6 )
         log:outputString """	<p><em>\\?[A-Z_a-z√Ä-√ñ√ò-√∂√∏-ÀøÕ∞-ÕΩÕø-·øø‚Äå-‚Äç‚Å∞-‚Üè‚∞Ä-‚øØ„ÄÅ-ÌüøÔ§Ä-Ô∑èÔ∑∞-ÔøΩêÄÄ-ÛØøø][\\-0-9A-Z_a-z¬∑√Ä-√ñ√ò-√∂√∏-ÕΩÕø-·øø‚Äå-‚Äç‚Äø-‚ÅÄ‚Å∞-‚Üè‚∞Ä-‚øØ„ÄÅ-ÌüøÔ§Ä-Ô∑èÔ∑∞-ÔøΩêÄÄ-ÛØøø]*</em></p>
""" .
      ( "quickvariable"
        9 )
         log:outputString "\t</dd>\n" .
      ( "rational"
        0 )
         log:outputString """  <dt><a name='rational'>rational</a></dt><dd>
""" .
      ( "rational"
        5 )
         log:outputString """		<p><a href='#integer'>integer</a> <b><code>"/"</code></b> <a href='#unsignedint'>unsignedint</a></p>
""" .
      ( "rational"
        9 )
         log:outputString "\t</dd>\n" .
      ( "simpleStatement"
        0 )
         log:outputString """  <dt><a name='simpleStatement'>simpleStatement</a></dt><dd>
""" .
      ( "simpleStatement"
        5 )
         log:outputString """		<p><a href='#subject'>subject</a> <a href='#propertylist'>propertylist</a></p>
""" .
      ( "simpleStatement"
        9 )
         log:outputString "\t</dd>\n" .
      ( "statement"
        0 )
         log:outputString """  <dt><a name='statement'>statement</a></dt><dd>
""" .
      ( "statement"
        5 )
         log:outputString """		<p><a href='#declaration'>declaration</a></p>
""",
                """		<p><a href='#existential'>existential</a></p>
""",
                """		<p><a href='#simpleStatement'>simpleStatement</a></p>
""",
                """		<p><a href='#universal'>universal</a></p>
""" .
      ( "statement"
        9 )
         log:outputString "\t</dd>\n" .
      ( "statementlist"
        0 )
         log:outputString """  <dt><a name='statementlist'>statementlist</a></dt><dd>
""" .
      ( "statementlist"
        5 )
         log:outputString """		<p><a href='#statement'>statement</a> <a href='#statementtail'>statementtail</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "statementlist"
        9 )
         log:outputString "\t</dd>\n" .
      ( "statements_optional"
        0 )
         log:outputString """  <dt><a name='statements_optional'>statements_optional</a></dt><dd>
""" .
      ( "statements_optional"
        5 )
         log:outputString """		<p><a href='#statement'>statement</a> <b><code>"."</code></b> <a href='#statements_optional'>statements_optional</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "statements_optional"
        9 )
         log:outputString "\t</dd>\n" .
      ( "statementtail"
        0 )
         log:outputString """  <dt><a name='statementtail'>statementtail</a></dt><dd>
""" .
      ( "statementtail"
        5 )
         log:outputString """		<p><b><code>"."</code></b> <a href='#statementlist'>statementlist</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "statementtail"
        9 )
         log:outputString "\t</dd>\n" .
      ( "string"
        0 )
         log:outputString """  <dt><a name='string'>string</a></dt><dd>
""" .
      ( "string"
        6 )
         log:outputString """	<p><em>(\"""[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*\""")|("[^"\\\\]*(?:\\\\.[^"\\\\]*)*")</em></p>
""" .
      ( "string"
        9 )
         log:outputString "\t</dd>\n" .
      ( "subject"
        0 )
         log:outputString """  <dt><a name='subject'>subject</a></dt><dd>
""" .
      ( "subject"
        5 )
         log:outputString """		<p><a href='#expression'>expression</a></p>
""" .
      ( "subject"
        9 )
         log:outputString "\t</dd>\n" .
      ( "symbol"
        0 )
         log:outputString """  <dt><a name='symbol'>symbol</a></dt><dd>
""" .
      ( "symbol"
        5 )
         log:outputString """		<p><a href='#explicituri'>explicituri</a></p>
""",
                """		<p><a href='#qname'>qname</a></p>
""" .
      ( "symbol"
        9 )
         log:outputString "\t</dd>\n" .
      ( "symbol_csl"
        0 )
         log:outputString """  <dt><a name='symbol_csl'>symbol_csl</a></dt><dd>
""" .
      ( "symbol_csl"
        5 )
         log:outputString """		<p><a href='#symbol'>symbol</a> <a href='#symbol_csl_tail'>symbol_csl_tail</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "symbol_csl"
        9 )
         log:outputString "\t</dd>\n" .
      ( "symbol_csl_tail"
        0 )
         log:outputString """  <dt><a name='symbol_csl_tail'>symbol_csl_tail</a></dt><dd>
""" .
      ( "symbol_csl_tail"
        5 )
         log:outputString """		<p><b><code>","</code></b> <a href='#symbol'>symbol</a> <a href='#symbol_csl_tail'>symbol_csl_tail</a></p>
""",
                """		<p><em>void</em></p>
""" .
      ( "symbol_csl_tail"
        9 )
         log:outputString "\t</dd>\n" .
      ( "universal"
        0 )
         log:outputString """  <dt><a name='universal'>universal</a></dt><dd>
""" .
      ( "universal"
        5 )
         log:outputString """		<p><b><code>"@forAll"</code></b> <a href='#symbol_csl'>symbol_csl</a></p>
""" .
      ( "universal"
        9 )
         log:outputString "\t</dd>\n" .
      ( "unsignedint"
        0 )
         log:outputString """  <dt><a name='unsignedint'>unsignedint</a></dt><dd>
""" .
      ( "unsignedint"
        6 )
         log:outputString """	<p><em>[0-9]+</em></p>
""" .
      ( "unsignedint"
        9 )
         log:outputString "\t</dd>\n" .
      ( "{"
        :formulacontent
        "}" )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<b><code>"{"</code></b> <a href='#formulacontent'>formulacontent</a> <b><code>"}"</code></b>""" .
      ( "}" )
         a h:SequenceTail;
         h:seqlabel """<b><code>"}"</code></b>""" .
      ( "~~"
        9 )
         log:outputString "\n</dl>\n</html>\n" .
      ( cfg:eof )
         a h:SequenceTail;
         h:seqlabel "<em>EOF</em>" .
      ( :barename
        <#_g3> )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#barename'>barename</a> <a href='#barename_csl_tail'>barename_csl_tail</a>" .
      ( :boolean )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#boolean'>boolean</a>" .
      ( :decimal )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#decimal'>decimal</a>" .
      ( :declaration )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#declaration'>declaration</a>" .
      ( :double )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#double'>double</a>" .
      ( :dtlang )
         a h:SequenceTail;
         h:seqlabel "<a href='#dtlang'>dtlang</a>" .
      ( :existential )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#existential'>existential</a>" .
      ( :explicituri )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#explicituri'>explicituri</a>" .
      ( :expression
        "@of" )
         a h:SequenceTail;
         h:seqlabel """<a href='#expression'>expression</a> <b><code>"@of"</code></b>""" .
      ( :expression
        :pathlist )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#expression'>expression</a> <a href='#pathlist'>pathlist</a>" .
      ( :expression )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#expression'>expression</a>" .
      ( :formulacontent
        "}" )
         a h:SequenceTail;
         h:seqlabel """<a href='#formulacontent'>formulacontent</a> <b><code>"}"</code></b>""" .
      ( :integer
        "/"
        :unsignedint )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<a href='#integer'>integer</a> <b><code>"/"</code></b> <a href='#unsignedint'>unsignedint</a>""" .
      ( :integer )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#integer'>integer</a>" .
      ( :langcode )
         a h:SequenceTail;
         h:seqlabel "<a href='#langcode'>langcode</a>" .
      ( :literal )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#literal'>literal</a>" .
      ( :numericliteral )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#numericliteral'>numericliteral</a>" .
      ( :object
        :objecttail
        :propertylisttail )
         a h:SequenceTail;
         h:seqlabel "<a href='#object'>object</a> <a href='#objecttail'>objecttail</a> <a href='#propertylisttail'>propertylisttail</a>" .
      ( :object
        :objecttail )
         a h:SequenceTail;
         h:seqlabel "<a href='#object'>object</a> <a href='#objecttail'>objecttail</a>" .
      ( :objecttail
        :propertylisttail )
         a h:SequenceTail;
         h:seqlabel "<a href='#objecttail'>objecttail</a> <a href='#propertylisttail'>propertylisttail</a>" .
      ( :objecttail )
         a h:SequenceTail;
         h:seqlabel "<a href='#objecttail'>objecttail</a>" .
      ( :pathitem
        :pathtail )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#pathitem'>pathitem</a> <a href='#pathtail'>pathtail</a>" .
      ( :pathlist
        ")" )
         a h:SequenceTail;
         h:seqlabel """<a href='#pathlist'>pathlist</a> <b><code>")"</code></b>""" .
      ( :pathlist )
         a h:SequenceTail;
         h:seqlabel "<a href='#pathlist'>pathlist</a>" .
      ( :pathtail )
         a h:SequenceTail;
         h:seqlabel "<a href='#pathtail'>pathtail</a>" .
      ( :predicate
        :object
        :objecttail
        :propertylisttail )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#predicate'>predicate</a> <a href='#object'>object</a> <a href='#objecttail'>objecttail</a> <a href='#propertylisttail'>propertylisttail</a>" .
      ( :prefix
        :explicituri )
         a h:SequenceTail;
         h:seqlabel "<a href='#prefix'>prefix</a> <a href='#explicituri'>explicituri</a>" .
      ( :propertylist
        "]" )
         a h:SequenceTail;
         h:seqlabel """<a href='#propertylist'>propertylist</a> <b><code>"]"</code></b>""" .
      ( :propertylist )
         a h:SequenceTail;
         h:seqlabel "<a href='#propertylist'>propertylist</a>" .
      ( :propertylisttail )
         a h:SequenceTail;
         h:seqlabel "<a href='#propertylisttail'>propertylisttail</a>" .
      ( :qname )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#qname'>qname</a>" .
      ( :quickvariable )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#quickvariable'>quickvariable</a>" .
      ( :rational )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#rational'>rational</a>" .
      ( :simpleStatement )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#simpleStatement'>simpleStatement</a>" .
      ( :statement
        "."
        :statements_optional )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel """<a href='#statement'>statement</a> <b><code>"."</code></b> <a href='#statements_optional'>statements_optional</a>""" .
      ( :statement
        :statementtail )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#statement'>statement</a> <a href='#statementtail'>statementtail</a>" .
      ( :statementlist )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#statementlist'>statementlist</a>" .
      ( :statements_optional
        cfg:eof )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#statements_optional'>statements_optional</a> <em>EOF</em>" .
      ( :statements_optional )
         a h:SequenceTail;
         h:seqlabel "<a href='#statements_optional'>statements_optional</a>" .
      ( :statementtail )
         a h:SequenceTail;
         h:seqlabel "<a href='#statementtail'>statementtail</a>" .
      ( :string
        :dtlang )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#string'>string</a> <a href='#dtlang'>dtlang</a>" .
      ( :subject
        :propertylist )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#subject'>subject</a> <a href='#propertylist'>propertylist</a>" .
      ( :symbol
        <#_g4> )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#symbol'>symbol</a> <a href='#symbol_csl_tail'>symbol_csl_tail</a>" .
      ( :symbol
        <#_g5> )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#symbol'>symbol</a> <a href='#symbol_csl_tail'>symbol_csl_tail</a>" .
      ( :symbol )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#symbol'>symbol</a>" .
      ( :universal )
         a h:Sequence,
                h:SequenceTail;
         h:seqlabel "<a href='#universal'>universal</a>" .
      ( :unsignedint )
         a h:SequenceTail;
         h:seqlabel "<a href='#unsignedint'>unsignedint</a>" .
      ( <#_g0> )
         a h:SequenceTail;
         h:seqlabel "<a href='#symbol_csl'>symbol_csl</a>" .
      ( <#_g1> )
         a h:SequenceTail;
         h:seqlabel "<a href='#symbol_csl'>symbol_csl</a>" .
      ( <#_g2> )
         a h:SequenceTail;
         h:seqlabel "<a href='#barename_csl'>barename_csl</a>" .
      ( <#_g3> )
         a h:SequenceTail;
         h:seqlabel "<a href='#barename_csl_tail'>barename_csl_tail</a>" .
      ( <#_g4> )
         a h:SequenceTail;
         h:seqlabel "<a href='#symbol_csl_tail'>symbol_csl_tail</a>" .
      ( <#_g5> )
         a h:SequenceTail;
         h:seqlabel "<a href='#symbol_csl_tail'>symbol_csl_tail</a>" .
    
    <cfg2bnf.n3>     rdfs:comment """ 

These are rules to take the shortcut ontology such as cfg:zeroOrOneOf 
and expland them into the base cfg:mustBeOneSequence.
It also generates human-readable labels for things which have been
generated.

This file was split from n3.n3 on 2007-01-20.
""" .
    
    cfg:eof     h:reference "<em>EOF</em>" .
    
    :barename     a h:Production;
         cfg:canStartWith "_",
                "a";
         cfg:label "barename";
         cfg:matches "[A-Z_a-z√Ä-√ñ√ò-√∂√∏-ÀøÕ∞-ÕΩÕø-·øø‚Äå-‚Äç‚Å∞-‚Üè‚∞Ä-‚øØ„ÄÅ-ÌüøÔ§Ä-Ô∑èÔ∑∞-ÔøΩêÄÄ-ÛØøø][\\-0-9A-Z_a-z¬∑√Ä-√ñ√ò-√∂√∏-ÕΩÕø-·øø‚Äå-‚Äç‚Äø-‚ÅÄ‚Å∞-‚Üè‚∞Ä-‚øØ„ÄÅ-ÌüøÔ§Ä-Ô∑èÔ∑∞-ÔøΩêÄÄ-ÛØøø]*";
         h:reference "<a href='#barename'>barename</a>" .
    
    :boolean     a h:Production;
         cfg:canBeSequence  (
        "@false" ),
                 (
        "@true" );
         cfg:label "boolean";
         cfg:mustBeOneSequence  (
         (
            "@true" )
         (
            "@false" ) );
         h:optionTail (),
                 (
         (
            "@false" ) ),
                 (
         (
            "@true" )
         (
            "@false" ) );
         h:reference "<a href='#boolean'>boolean</a>" .
    
    :date     a h:Production;
         cfg:canStartWith "0";
         cfg:label "date";
         cfg:matches "[0-9][0-9]-[0-9][0-9]-[0-9][0-9]Z?";
         h:reference "<a href='#date'>date</a>" .
    
    :dateTime     a h:Production;
         cfg:canStartWith "0";
         cfg:label "dateTime";
         cfg:matches "[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9](T[0-9][0-9]:[0-9][0-9](:[0-9][0-9](\\.[0-9]*)?)?)?Z?";
         h:reference "<a href='#dateTime'>dateTime</a>" .
    
    :decimal     a h:Production;
         cfg:canStartWith "+",
                "-",
                "0";
         cfg:label "decimal";
         cfg:matches "[-+]?[0-9]+\\.[0-9]*";
         h:reference "<a href='#decimal'>decimal</a>" .
    
    :declaration     a h:Production;
         cfg:canBeSequence  (
        "@base"
        :explicituri ),
                 (
        "@keywords"
        <#_g2> ),
                 (
        "@prefix"
        :prefix
        :explicituri );
         cfg:label "declaration";
         cfg:mustBeOneSequence  (
         (
            "@base"
            :explicituri )
         (
            "@prefix"
            :prefix
            :explicituri )
         (
            "@keywords"
            <#_g2> ) );
         h:optionTail (),
                 (
         (
            "@base"
            :explicituri )
         (
            "@prefix"
            :prefix
            :explicituri )
         (
            "@keywords"
            <#_g2> ) ),
                 (
         (
            "@keywords"
            <#_g2> ) ),
                 (
         (
            "@prefix"
            :prefix
            :explicituri )
         (
            "@keywords"
            <#_g2> ) );
         h:reference "<a href='#declaration'>declaration</a>" .
    
    :document     a rul:Used,
                h:Production;
         cfg:canBeSequence  (
        :statements_optional
        cfg:eof );
         cfg:label "document";
         cfg:mustBeOneSequence  (
         (
            :statements_optional
            cfg:eof ) );
         h:optionTail (),
                 (
         (
            :statements_optional
            cfg:eof ) );
         h:reference "<a href='#document'>document</a>" .
    
    :double     a h:Production;
         cfg:canStartWith "+",
                "-",
                "0";
         cfg:label "double";
         cfg:matches "[-+]?[0-9]+(\\.[0-9]+)?([eE][-+]?[0-9]+)";
         h:reference "<a href='#double'>double</a>" .
    
    :dtlang     a h:Production;
         cfg:canBeSequence (),
                 (
        "@"
        :langcode ),
                 (
        "^^"
        :symbol );
         cfg:label "dtlang";
         cfg:mustBeOneSequence  (
        ()
         (
            "@"
            :langcode )
         (
            "^^"
            :symbol ) );
         h:optionTail (),
                 (
        ()
         (
            "@"
            :langcode )
         (
            "^^"
            :symbol ) ),
                 (
         (
            "@"
            :langcode )
         (
            "^^"
            :symbol ) ),
                 (
         (
            "^^"
            :symbol ) );
         h:reference "<a href='#dtlang'>dtlang</a>" .
    
    :existential     a h:Production;
         cfg:canBeSequence  (
        "@forSome"
        <#_g1> );
         cfg:label "existential";
         cfg:mustBeOneSequence  (
         (
            "@forSome"
            <#_g1> ) );
         h:optionTail (),
                 (
         (
            "@forSome"
            <#_g1> ) );
         h:reference "<a href='#existential'>existential</a>" .
    
    :explicituri     a h:Production;
         cfg:canStartWith "<";
         cfg:label "explicituri";
         cfg:matches "<[^>]*>";
         h:reference "<a href='#explicituri'>explicituri</a>" .
    
    :expression     a h:Production;
         cfg:canBeSequence  (
        :pathitem
        :pathtail );
         cfg:label "expression";
         cfg:mustBeOneSequence  (
         (
            :pathitem
            :pathtail ) );
         h:optionTail (),
                 (
         (
            :pathitem
            :pathtail ) );
         h:reference "<a href='#expression'>expression</a>" .
    
    :formulacontent     a h:Production;
         cfg:canBeSequence  (
        :statementlist );
         cfg:label "formulacontent";
         cfg:mustBeOneSequence  (
         (
            :statementlist ) );
         h:optionTail (),
                 (
         (
            :statementlist ) );
         h:reference "<a href='#formulacontent'>formulacontent</a>" .
    
    :integer     a h:Production;
         cfg:canStartWith "+",
                "-",
                "0";
         cfg:label "integer";
         cfg:matches "[-+]?[0-9]+";
         h:reference "<a href='#integer'>integer</a>" .
    
    :langcode     a h:Production;
         cfg:canStartWith "a";
         cfg:label "langcode";
         cfg:matches "[a-z]+(-[a-z0-9]+)*";
         h:reference "<a href='#langcode'>langcode</a>" .
    
    :language     a cfg:Language;
         cfg:document :document;
         cfg:whiteSpace "@@@@@" .
    
    :literal     a h:Production;
         cfg:canBeSequence  (
        :string
        :dtlang );
         cfg:label "literal";
         cfg:mustBeOneSequence  (
         (
            :string
            :dtlang ) );
         h:optionTail (),
                 (
         (
            :string
            :dtlang ) );
         h:reference "<a href='#literal'>literal</a>" .
    
    :numericliteral     a h:Production;
         cfg:canBeSequence  (
        :decimal ),
                 (
        :double ),
                 (
        :integer ),
                 (
        :rational );
         cfg:label "numericliteral";
         cfg:mustBeOneSequence  (
         (
            :integer )
         (
            :rational )
         (
            :double )
         (
            :decimal ) );
         h:optionTail (),
                 (
         (
            :decimal ) ),
                 (
         (
            :double )
         (
            :decimal ) ),
                 (
         (
            :integer )
         (
            :rational )
         (
            :double )
         (
            :decimal ) ),
                 (
         (
            :rational )
         (
            :double )
         (
            :decimal ) );
         h:reference "<a href='#numericliteral'>numericliteral</a>" .
    
    :object     a h:Production;
         cfg:canBeSequence  (
        :expression );
         cfg:label "object";
         cfg:mustBeOneSequence  (
         (
            :expression ) );
         h:optionTail (),
                 (
         (
            :expression ) );
         h:reference "<a href='#object'>object</a>" .
    
    :objecttail     a h:Production;
         cfg:canBeSequence (),
                 (
        ","
        :object
        :objecttail );
         cfg:label "objecttail";
         cfg:mustBeOneSequence  (
        ()
         (
            ","
            :object
            :objecttail ) );
         h:optionTail (),
                 (
        ()
         (
            ","
            :object
            :objecttail ) ),
                 (
         (
            ","
            :object
            :objecttail ) );
         h:reference "<a href='#objecttail'>objecttail</a>" .
    
    :pathitem     a h:Production;
         cfg:canBeSequence  (
        "("
        :pathlist
        ")" ),
                 (
        "["
        :propertylist
        "]" ),
                 (
        "{"
        :formulacontent
        "}" ),
                 (
        :boolean ),
                 (
        :literal ),
                 (
        :numericliteral ),
                 (
        :quickvariable ),
                 (
        :symbol );
         cfg:label "pathitem";
         cfg:mustBeOneSequence  (
         (
            :symbol )
         (
            "{"
            :formulacontent
            "}" )
         (
            :quickvariable )
         (
            :numericliteral )
         (
            :literal )
         (
            "["
            :propertylist
            "]" )
         (
            "("
            :pathlist
            ")" )
         (
            :boolean ) );
         h:optionTail (),
                 (
         (
            "("
            :pathlist
            ")" )
         (
            :boolean ) ),
                 (
         (
            "["
            :propertylist
            "]" )
         (
            "("
            :pathlist
            ")" )
         (
            :boolean ) ),
                 (
         (
            "{"
            :formulacontent
            "}" )
         (
            :quickvariable )
         (
            :numericliteral )
         (
            :literal )
         (
            "["
            :propertylist
            "]" )
         (
            "("
            :pathlist
            ")" )
         (
            :boolean ) ),
                 (
         (
            :boolean ) ),
                 (
         (
            :literal )
         (
            "["
            :propertylist
            "]" )
         (
            "("
            :pathlist
            ")" )
         (
            :boolean ) ),
                 (
         (
            :numericliteral )
         (
            :literal )
         (
            "["
            :propertylist
            "]" )
         (
            "("
            :pathlist
            ")" )
         (
            :boolean ) ),
                 (
         (
            :quickvariable )
         (
            :numericliteral )
         (
            :literal )
         (
            "["
            :propertylist
            "]" )
         (
            "("
            :pathlist
            ")" )
         (
            :boolean ) ),
                 (
         (
            :symbol )
         (
            "{"
            :formulacontent
            "}" )
         (
            :quickvariable )
         (
            :numericliteral )
         (
            :literal )
         (
            "["
            :propertylist
            "]" )
         (
            "("
            :pathlist
            ")" )
         (
            :boolean ) );
         h:reference "<a href='#pathitem'>pathitem</a>" .
    
    :pathlist     a h:Production;
         cfg:canBeSequence (),
                 (
        :expression
        :pathlist );
         cfg:label "pathlist";
         cfg:mustBeOneSequence  (
        ()
         (
            :expression
            :pathlist ) );
         h:optionTail (),
                 (
        ()
         (
            :expression
            :pathlist ) ),
                 (
         (
            :expression
            :pathlist ) );
         h:reference "<a href='#pathlist'>pathlist</a>" .
    
    :pathtail     a h:Production;
         cfg:canBeSequence (),
                 (
        "!"
        :expression ),
                 (
        "^"
        :expression );
         cfg:label "pathtail";
         cfg:mustBeOneSequence  (
        ()
         (
            "!"
            :expression )
         (
            "^"
            :expression ) );
         h:optionTail (),
                 (
        ()
         (
            "!"
            :expression )
         (
            "^"
            :expression ) ),
                 (
         (
            "!"
            :expression )
         (
            "^"
            :expression ) ),
                 (
         (
            "^"
            :expression ) );
         h:reference "<a href='#pathtail'>pathtail</a>" .
    
    :predicate     a h:Production;
         cfg:canBeSequence  (
        "<=" ),
                 (
        "=" ),
                 (
        "=>" ),
                 (
        "@a" ),
                 (
        "@has"
        :expression ),
                 (
        "@is"
        :expression
        "@of" ),
                 (
        :expression );
         cfg:label "predicate";
         cfg:mustBeOneSequence  (
         (
            :expression )
         (
            "@has"
            :expression )
         (
            "@is"
            :expression
            "@of" )
         (
            "@a" )
         (
            "=" )
         (
            "=>" )
         (
            "<=" ) );
         h:optionTail (),
                 (
         (
            "<=" ) ),
                 (
         (
            "=" )
         (
            "=>" )
         (
            "<=" ) ),
                 (
         (
            "=>" )
         (
            "<=" ) ),
                 (
         (
            "@a" )
         (
            "=" )
         (
            "=>" )
         (
            "<=" ) ),
                 (
         (
            "@has"
            :expression )
         (
            "@is"
            :expression
            "@of" )
         (
            "@a" )
         (
            "=" )
         (
            "=>" )
         (
            "<=" ) ),
                 (
         (
            "@is"
            :expression
            "@of" )
         (
            "@a" )
         (
            "=" )
         (
            "=>" )
         (
            "<=" ) ),
                 (
         (
            :expression )
         (
            "@has"
            :expression )
         (
            "@is"
            :expression
            "@of" )
         (
            "@a" )
         (
            "=" )
         (
            "=>" )
         (
            "<=" ) );
         h:reference "<a href='#predicate'>predicate</a>" .
    
    :prefix     a h:Production;
         cfg:canStartWith ":",
                "_",
                "a";
         cfg:label "prefix";
         cfg:matches "([A-Z_a-z√Ä-√ñ√ò-√∂√∏-ÀøÕ∞-ÕΩÕø-·øø‚Äå-‚Äç‚Å∞-‚Üè‚∞Ä-‚øØ„ÄÅ-ÌüøÔ§Ä-Ô∑èÔ∑∞-ÔøΩêÄÄ-ÛØøø][\\-0-9A-Z_a-z¬∑√Ä-√ñ√ò-√∂√∏-ÕΩÕø-·øø‚Äå-‚Äç‚Äø-‚ÅÄ‚Å∞-‚Üè‚∞Ä-‚øØ„ÄÅ-ÌüøÔ§Ä-Ô∑èÔ∑∞-ÔøΩêÄÄ-ÛØøø]*)?:";
         h:reference "<a href='#prefix'>prefix</a>" .
    
    :propertylist     a h:Production;
         cfg:canBeSequence (),
                 (
        :predicate
        :object
        :objecttail
        :propertylisttail );
         cfg:label "propertylist";
         cfg:mustBeOneSequence  (
        ()
         (
            :predicate
            :object
            :objecttail
            :propertylisttail ) );
         h:optionTail (),
                 (
        ()
         (
            :predicate
            :object
            :objecttail
            :propertylisttail ) ),
                 (
         (
            :predicate
            :object
            :objecttail
            :propertylisttail ) );
         h:reference "<a href='#propertylist'>propertylist</a>" .
    
    :propertylisttail     a h:Production;
         cfg:canBeSequence (),
                 (
        ";"
        :propertylist );
         cfg:label "propertylisttail";
         cfg:mustBeOneSequence  (
        ()
         (
            ";"
            :propertylist ) );
         h:optionTail (),
                 (
        ()
         (
            ";"
            :propertylist ) ),
                 (
         (
            ";"
            :propertylist ) );
         h:reference "<a href='#propertylisttail'>propertylisttail</a>" .
    
    :qname     a h:Production;
         cfg:canStartWith ":",
                "_",
                "a";
         cfg:label "qname";
         cfg:matches "(([A-Z_a-z√Ä-√ñ√ò-√∂√∏-ÀøÕ∞-ÕΩÕø-·øø‚Äå-‚Äç‚Å∞-‚Üè‚∞Ä-‚øØ„ÄÅ-ÌüøÔ§Ä-Ô∑èÔ∑∞-ÔøΩêÄÄ-ÛØøø][\\-0-9A-Z_a-z¬∑√Ä-√ñ√ò-√∂√∏-ÕΩÕø-·øø‚Äå-‚Äç‚Äø-‚ÅÄ‚Å∞-‚Üè‚∞Ä-‚øØ„ÄÅ-ÌüøÔ§Ä-Ô∑èÔ∑∞-ÔøΩêÄÄ-ÛØøø]*)?:)?[A-Z_a-z√Ä-√ñ√ò-√∂√∏-ÀøÕ∞-ÕΩÕø-·øø‚Äå-‚Äç‚Å∞-‚Üè‚∞Ä-‚øØ„ÄÅ-ÌüøÔ§Ä-Ô∑èÔ∑∞-ÔøΩêÄÄ-ÛØøø][\\-0-9A-Z_a-z¬∑√Ä-√ñ√ò-√∂√∏-ÕΩÕø-·øø‚Äå-‚Äç‚Äø-‚ÅÄ‚Å∞-‚Üè‚∞Ä-‚øØ„ÄÅ-ÌüøÔ§Ä-Ô∑èÔ∑∞-ÔøΩêÄÄ-ÛØøø]*";
         h:reference "<a href='#qname'>qname</a>" .
    
    :quickvariable     a h:Production;
         cfg:canStartWith "?";
         cfg:label "quickvariable";
         cfg:matches "\\?[A-Z_a-z√Ä-√ñ√ò-√∂√∏-ÀøÕ∞-ÕΩÕø-·øø‚Äå-‚Äç‚Å∞-‚Üè‚∞Ä-‚øØ„ÄÅ-ÌüøÔ§Ä-Ô∑èÔ∑∞-ÔøΩêÄÄ-ÛØøø][\\-0-9A-Z_a-z¬∑√Ä-√ñ√ò-√∂√∏-ÕΩÕø-·øø‚Äå-‚Äç‚Äø-‚ÅÄ‚Å∞-‚Üè‚∞Ä-‚øØ„ÄÅ-ÌüøÔ§Ä-Ô∑èÔ∑∞-ÔøΩêÄÄ-ÛØøø]*";
         h:reference "<a href='#quickvariable'>quickvariable</a>" .
    
    :rational     a h:Production;
         cfg:canBeSequence  (
        :integer
        "/"
        :unsignedint );
         cfg:label "rational";
         cfg:mustBeOneSequence  (
         (
            :integer
            "/"
            :unsignedint ) );
         h:optionTail (),
                 (
         (
            :integer
            "/"
            :unsignedint ) );
         h:reference "<a href='#rational'>rational</a>" .
    
    :simpleStatement     a h:Production;
         cfg:canBeSequence  (
        :subject
        :propertylist );
         cfg:label "simpleStatement";
         cfg:mustBeOneSequence  (
         (
            :subject
            :propertylist ) );
         h:optionTail (),
                 (
         (
            :subject
            :propertylist ) );
         h:reference "<a href='#simpleStatement'>simpleStatement</a>" .
    
    :statement     a h:Production;
         cfg:canBeSequence  (
        :declaration ),
                 (
        :existential ),
                 (
        :simpleStatement ),
                 (
        :universal );
         cfg:label "statement";
         cfg:mustBeOneSequence  (
         (
            :declaration )
         (
            :universal )
         (
            :existential )
         (
            :simpleStatement ) );
         h:optionTail (),
                 (
         (
            :declaration )
         (
            :universal )
         (
            :existential )
         (
            :simpleStatement ) ),
                 (
         (
            :existential )
         (
            :simpleStatement ) ),
                 (
         (
            :simpleStatement ) ),
                 (
         (
            :universal )
         (
            :existential )
         (
            :simpleStatement ) );
         h:reference "<a href='#statement'>statement</a>" .
    
    :statementlist     a h:Production;
         cfg:canBeSequence (),
                 (
        :statement
        :statementtail );
         cfg:label "statementlist";
         cfg:mustBeOneSequence  (
        ()
         (
            :statement
            :statementtail ) );
         h:optionTail (),
                 (
        ()
         (
            :statement
            :statementtail ) ),
                 (
         (
            :statement
            :statementtail ) );
         h:reference "<a href='#statementlist'>statementlist</a>" .
    
    :statements_optional     a h:Production;
         cfg:canBeSequence (),
                 (
        :statement
        "."
        :statements_optional );
         cfg:label "statements_optional";
         cfg:mustBeOneSequence  (
        ()
         (
            :statement
            "."
            :statements_optional ) );
         h:optionTail (),
                 (
        ()
         (
            :statement
            "."
            :statements_optional ) ),
                 (
         (
            :statement
            "."
            :statements_optional ) );
         h:reference "<a href='#statements_optional'>statements_optional</a>" .
    
    :statementtail     a h:Production;
         cfg:canBeSequence (),
                 (
        "."
        :statementlist );
         cfg:label "statementtail";
         cfg:mustBeOneSequence  (
        ()
         (
            "."
            :statementlist ) );
         h:optionTail (),
                 (
        ()
         (
            "."
            :statementlist ) ),
                 (
         (
            "."
            :statementlist ) );
         h:reference "<a href='#statementtail'>statementtail</a>" .
    
    :string     a h:Production;
         cfg:canStartWith "\"";
         cfg:label "string";
         cfg:matches """(\"""[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*\""")|("[^"\\\\]*(?:\\\\.[^"\\\\]*)*")""";
         h:reference "<a href='#string'>string</a>" .
    
    :subject     a h:Production;
         cfg:canBeSequence  (
        :expression );
         cfg:label "subject";
         cfg:mustBeOneSequence  (
         (
            :expression ) );
         h:optionTail (),
                 (
         (
            :expression ) );
         h:reference "<a href='#subject'>subject</a>" .
    
    :symbol     a h:Production;
         cfg:canBeSequence  (
        :explicituri ),
                 (
        :qname );
         cfg:label "symbol";
         cfg:mustBeOneSequence  (
         (
            :explicituri )
         (
            :qname ) );
         h:optionTail (),
                 (
         (
            :explicituri )
         (
            :qname ) ),
                 (
         (
            :qname ) );
         h:reference "<a href='#symbol'>symbol</a>" .
    
    :universal     a h:Production;
         cfg:canBeSequence  (
        "@forAll"
        <#_g0> );
         cfg:label "universal";
         cfg:mustBeOneSequence  (
         (
            "@forAll"
            <#_g0> ) );
         h:optionTail (),
                 (
         (
            "@forAll"
            <#_g0> ) );
         h:reference "<a href='#universal'>universal</a>" .
    
    :unsignedint     a h:Production;
         cfg:canStartWith "0";
         cfg:label "unsignedint";
         cfg:matches "[0-9]+";
         h:reference "<a href='#unsignedint'>unsignedint</a>" .
    
    <#_g0>     a h:Production;
         cfg:canBeSequence (),
                 (
        :symbol
        <#_g5> );
         cfg:commaSeparatedListOf :symbol;
         cfg:label "symbol_csl";
         cfg:mustBeOneSequence  (
        ()
         (
            :symbol
            <#_g5> ) );
         h:optionTail (),
                 (
        ()
         (
            :symbol
            <#_g5> ) ),
                 (
         (
            :symbol
            <#_g5> ) );
         h:reference "<a href='#symbol_csl'>symbol_csl</a>" .
    
    <#_g1>     a h:Production;
         cfg:canBeSequence (),
                 (
        :symbol
        <#_g4> );
         cfg:commaSeparatedListOf :symbol;
         cfg:label "symbol_csl";
         cfg:mustBeOneSequence  (
        ()
         (
            :symbol
            <#_g4> ) );
         h:optionTail (),
                 (
        ()
         (
            :symbol
            <#_g4> ) ),
                 (
         (
            :symbol
            <#_g4> ) );
         h:reference "<a href='#symbol_csl'>symbol_csl</a>" .
    
    <#_g2>     a h:Production;
         cfg:canBeSequence (),
                 (
        :barename
        <#_g3> );
         cfg:commaSeparatedListOf :barename;
         cfg:label "barename_csl";
         cfg:mustBeOneSequence  (
        ()
         (
            :barename
            <#_g3> ) );
         h:optionTail (),
                 (
        ()
         (
            :barename
            <#_g3> ) ),
                 (
         (
            :barename
            <#_g3> ) );
         h:reference "<a href='#barename_csl'>barename_csl</a>" .
    
    <#_g3>     a h:Production;
         cfg:CSLTail2 :barename;
         cfg:canBeSequence (),
                 (
        ","
        :barename
        <#_g3> );
         cfg:label "barename_csl_tail";
         cfg:mustBeOneSequence  (
        ()
         (
            ","
            :barename
            <#_g3> ) );
         h:optionTail (),
                 (
        ()
         (
            ","
            :barename
            <#_g3> ) ),
                 (
         (
            ","
            :barename
            <#_g3> ) );
         h:reference "<a href='#barename_csl_tail'>barename_csl_tail</a>" .
    
    <#_g4>     a h:Production;
         cfg:CSLTail2 :symbol;
         cfg:canBeSequence (),
                 (
        ","
        :symbol
        <#_g4> );
         cfg:label "symbol_csl_tail";
         cfg:mustBeOneSequence  (
        ()
         (
            ","
            :symbol
            <#_g4> ) );
         h:optionTail (),
                 (
        ()
         (
            ","
            :symbol
            <#_g4> ) ),
                 (
         (
            ","
            :symbol
            <#_g4> ) );
         h:reference "<a href='#symbol_csl_tail'>symbol_csl_tail</a>" .
    
    <#_g5>     a h:Production;
         cfg:CSLTail2 :symbol;
         cfg:canBeSequence (),
                 (
        ","
        :symbol
        <#_g5> );
         cfg:label "symbol_csl_tail";
         cfg:mustBeOneSequence  (
        ()
         (
            ","
            :symbol
            <#_g5> ) );
         h:optionTail (),
                 (
        ()
         (
            ","
            :symbol
            <#_g5> ) ),
                 (
         (
            ","
            :symbol
            <#_g5> ) );
         h:reference "<a href='#symbol_csl_tail'>symbol_csl_tail</a>" .
    
