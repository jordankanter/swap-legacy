#  n3
#
#  Categorized stuff
#
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix s: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix string: <http://www.w3.org/2000/10/swap/string#>.
@prefix math: <http://www.w3.org/2000/10/swap/math#>.
@prefix q:  <http://www.w3.org/2000/10/swap/pim/qif#>.
@prefix acc: <accounts.n3#> .   # for URIs Generated by qif2qu.n3

@prefix os: <http://www.w3.org/2000/10/swap/os#>.
@prefix tax:  <http://www.w3.org/2000/10/swap/pim/tax.n3#>.

#
@prefix : <#>.
@prefix foo: <#>.

@forAll :a, :c, :d, :k, :l, :p, :s, :t, :x, :y, :z.

# Select subclasses of TaxCategories.
#  Must be at least one entry, and must have a label

{ [] a :c. :c a q:Cat; s:label [] } log:implies { :c a :toBeDisplayed }.
 
#q:Unclassified a :toBeDisplayed; s:label "Unclassified transactions".
q:UnclassifiedIncome a :toBeDisplayed; s:label "Unclassified Income".
q:UnclassifiedOutgoing a :toBeDisplayed.

"00" log:outputString
"""<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Spending & Income by category - personal financial report</title>
  <link type="text/css" rel="stylesheet" href="report.css" />
</head>

<body>
<h1>Spending & Income by category</h1>
""".


{   :y a :toBeDisplayed; s:label :l.
    (:y!log:uri ".*#(.*)") string:scrape :a. 
    ( :l "0000") string:concatenation :k.
    ( "<h2><a name='" :a "'>  " :l """</a></h2><table>
 <tbody>
  <tr><th>Date</th>
   <th>Details ("payee")</th>
   <th>Amount</th></tr>""" ) string:concatenation :s
    } log:implies {
    :l log:outputString :s
}.

# Each line:

{  
    [] a :y; q:payee :p; q:amount :x; q:date :d; q:toAccount [s:label :a].
    :p log:notEqualTo "Check".
    :p log:notEqualTo "Check - Ecp".
    :y a :toBeDisplayed; s:label :l.
    ( :l :d ) string:concatenation :k.
    (  "<tr class='"  :a "'><td class='date'>" (:d "^([^T]*)")!string:scrape
#       "</td><td class='cat'>" :l
       "</td><td class='payee'>" :p
#       "</td><td class='to'>" :a
       "</td><td class='amount'>" :x "</td></tr>\n") string:concatenation :s
} log:implies {
   :k log:outputString :s
}.

acc:Default s:label "DEFAULT".

# end section:

{   :y a :toBeDisplayed; s:label :l.
    ( :l "9999") string:concatenation :k.
} log:implies {
    :l log:outputString "</table>\n"
}.




"zz" log:outputString """</body>
</html>
""".

#ends
